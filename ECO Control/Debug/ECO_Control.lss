
ECO_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00800060  00002b68  00002bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008001b4  008001b4  00002d50  2**0
                  ALLOC
  3 .stab         00001ed8  00000000  00000000  00002d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001057  00000000  00000000  00004c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00005e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000604f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  000086d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  00009bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000ae64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000b342  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bcec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <main>
      8a:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ea       	ldi	r26, 0xAC	; 172
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ea       	ldi	r24, 0xAC	; 172
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c ea       	ldi	r22, 0xAC	; 172
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	ec 54       	subi	r30, 0x4C	; 76
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <MUART_voidInit>:
#include "UART_private.h"
#include "UART_config.h"
#include "../../LIB/BIT_MATH.h"

void MUART_voidInit(u32 baud)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <MUART_voidInit+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <MUART_voidInit+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	69 83       	std	Y+1, r22	; 0x01
     e9c:	7a 83       	std	Y+2, r23	; 0x02
     e9e:	8b 83       	std	Y+3, r24	; 0x03
     ea0:	9c 83       	std	Y+4, r25	; 0x04
	/* Enable RX and TX */
		SET_BIT(UCSRB , UCSRB_RXEN);
     ea2:	aa e2       	ldi	r26, 0x2A	; 42
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ea e2       	ldi	r30, 0x2A	; 42
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	80 61       	ori	r24, 0x10	; 16
     eae:	8c 93       	st	X, r24
		SET_BIT(UCSRB , UCSRB_TXEN);
     eb0:	aa e2       	ldi	r26, 0x2A	; 42
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ea e2       	ldi	r30, 0x2A	; 42
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	88 60       	ori	r24, 0x08	; 8
     ebc:	8c 93       	st	X, r24

		/* Set to 8 bit mode
		 * No parity
	 	 * One stop bit */
		UCSRC = 0b10000110  ;
     ebe:	e0 e4       	ldi	r30, 0x40	; 64
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	86 e8       	ldi	r24, 0x86	; 134
     ec4:	80 83       	st	Z, r24

		/* Set buad rate to 9600 */
		UBRRL = 51 ;
     ec6:	e9 e2       	ldi	r30, 0x29	; 41
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	83 e3       	ldi	r24, 0x33	; 51
     ecc:	80 83       	st	Z, r24
}
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <MUART_voidTransmitData>:
void MUART_voidTransmitData(u8 A_u8Data)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <MUART_voidTransmitData+0x6>
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	89 83       	std	Y+1, r24	; 0x01
	//wait for empty transmit buffer
	while (GET_BIT(UCSRA , UCSRA_UDRE) == 0){}
     ee8:	eb e2       	ldi	r30, 0x2B	; 43
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z

	//put data into the buffer (send data)
	UDR = A_u8Data ;
     eee:	ec e2       	ldi	r30, 0x2C	; 44
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	80 83       	st	Z, r24
}
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <MUART_u8RecieveData>:
u8 MUART_u8RecieveData ()
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
	//wait for data to be recieved
	while (GET_BIT(UCSRA , UCSRA_RXC) == 0){}
     f0a:	eb e2       	ldi	r30, 0x2B	; 43
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z

	//get and return the return data from buffer
	return UDR ;
     f10:	ec e2       	ldi	r30, 0x2C	; 44
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z

}
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <MUART_voidSendString>:

void MUART_voidSendString (u8 *A_StrPtr)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	60 97       	sbiw	r28, 0x10	; 16
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	98 8b       	std	Y+16, r25	; 0x10
     f34:	8f 87       	std	Y+15, r24	; 0x0f
     f36:	7c c0       	rjmp	.+248    	; 0x1030 <MUART_voidSendString+0x112>
	while (*A_StrPtr != '\0')
		{
		MUART_voidTransmitData(*A_StrPtr);
     f38:	ef 85       	ldd	r30, Y+15	; 0x0f
     f3a:	f8 89       	ldd	r31, Y+16	; 0x10
     f3c:	80 81       	ld	r24, Z
     f3e:	0e 94 6e 07 	call	0xedc	; 0xedc <MUART_voidTransmitData>
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	a8 ec       	ldi	r26, 0xC8	; 200
     f48:	b1 e4       	ldi	r27, 0x41	; 65
     f4a:	8b 87       	std	Y+11, r24	; 0x0b
     f4c:	9c 87       	std	Y+12, r25	; 0x0c
     f4e:	ad 87       	std	Y+13, r26	; 0x0d
     f50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f52:	6b 85       	ldd	r22, Y+11	; 0x0b
     f54:	7c 85       	ldd	r23, Y+12	; 0x0c
     f56:	8d 85       	ldd	r24, Y+13	; 0x0d
     f58:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	4a e7       	ldi	r20, 0x7A	; 122
     f60:	55 e4       	ldi	r21, 0x45	; 69
     f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	8f 83       	std	Y+7, r24	; 0x07
     f6c:	98 87       	std	Y+8, r25	; 0x08
     f6e:	a9 87       	std	Y+9, r26	; 0x09
     f70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f72:	6f 81       	ldd	r22, Y+7	; 0x07
     f74:	78 85       	ldd	r23, Y+8	; 0x08
     f76:	89 85       	ldd	r24, Y+9	; 0x09
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e8       	ldi	r20, 0x80	; 128
     f80:	5f e3       	ldi	r21, 0x3F	; 63
     f82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f86:	88 23       	and	r24, r24
     f88:	2c f4       	brge	.+10     	; 0xf94 <MUART_voidSendString+0x76>
		__ticks = 1;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	9e 83       	std	Y+6, r25	; 0x06
     f90:	8d 83       	std	Y+5, r24	; 0x05
     f92:	3f c0       	rjmp	.+126    	; 0x1012 <MUART_voidSendString+0xf4>
	else if (__tmp > 65535)
     f94:	6f 81       	ldd	r22, Y+7	; 0x07
     f96:	78 85       	ldd	r23, Y+8	; 0x08
     f98:	89 85       	ldd	r24, Y+9	; 0x09
     f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	3f ef       	ldi	r19, 0xFF	; 255
     fa0:	4f e7       	ldi	r20, 0x7F	; 127
     fa2:	57 e4       	ldi	r21, 0x47	; 71
     fa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fa8:	18 16       	cp	r1, r24
     faa:	4c f5       	brge	.+82     	; 0xffe <MUART_voidSendString+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fac:	6b 85       	ldd	r22, Y+11	; 0x0b
     fae:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e2       	ldi	r20, 0x20	; 32
     fba:	51 e4       	ldi	r21, 0x41	; 65
     fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9e 83       	std	Y+6, r25	; 0x06
     fd2:	8d 83       	std	Y+5, r24	; 0x05
     fd4:	0f c0       	rjmp	.+30     	; 0xff4 <MUART_voidSendString+0xd6>
     fd6:	80 e9       	ldi	r24, 0x90	; 144
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	9c 83       	std	Y+4, r25	; 0x04
     fdc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <MUART_voidSendString+0xc4>
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	9e 83       	std	Y+6, r25	; 0x06
     ff2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	69 f7       	brne	.-38     	; 0xfd6 <MUART_voidSendString+0xb8>
     ffc:	14 c0       	rjmp	.+40     	; 0x1026 <MUART_voidSendString+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    1000:	78 85       	ldd	r23, Y+8	; 0x08
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	9a 85       	ldd	r25, Y+10	; 0x0a
    1006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	9e 81       	ldd	r25, Y+6	; 0x06
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	9a 81       	ldd	r25, Y+2	; 0x02
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <MUART_voidSendString+0x100>
    1022:	9a 83       	std	Y+2, r25	; 0x02
    1024:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(25);
		A_StrPtr++;
    1026:	8f 85       	ldd	r24, Y+15	; 0x0f
    1028:	98 89       	ldd	r25, Y+16	; 0x10
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	98 8b       	std	Y+16, r25	; 0x10
    102e:	8f 87       	std	Y+15, r24	; 0x0f

}

void MUART_voidSendString (u8 *A_StrPtr)
{
	while (*A_StrPtr != '\0')
    1030:	ef 85       	ldd	r30, Y+15	; 0x0f
    1032:	f8 89       	ldd	r31, Y+16	; 0x10
    1034:	80 81       	ld	r24, Z
    1036:	88 23       	and	r24, r24
    1038:	09 f0       	breq	.+2      	; 0x103c <MUART_voidSendString+0x11e>
    103a:	7e cf       	rjmp	.-260    	; 0xf38 <MUART_voidSendString+0x1a>
		{
		MUART_voidTransmitData(*A_StrPtr);
		_delay_ms(25);
		A_StrPtr++;
		}
}
    103c:	60 96       	adiw	r28, 0x10	; 16
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <MUART_voidRecieveString>:
u8* MUART_voidRecieveString ()
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	e4 97       	sbiw	r28, 0x34	; 52
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
	u8 ReceivedString[50]; // max length=50 chars
	u8 i = 0;
    1062:	1a 82       	std	Y+2, r1	; 0x02
	u8 ReceivedChar;

	do {
		ReceivedChar = MUART_u8RecieveData();
    1064:	0e 94 80 07 	call	0xf00	; 0xf00 <MUART_u8RecieveData>
    1068:	89 83       	std	Y+1, r24	; 0x01

		if (ReceivedChar != '\r' && ReceivedChar != '\n')
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	8d 30       	cpi	r24, 0x0D	; 13
    106e:	81 f0       	breq	.+32     	; 0x1090 <MUART_voidRecieveString+0x42>
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	8a 30       	cpi	r24, 0x0A	; 10
    1074:	69 f0       	breq	.+26     	; 0x1090 <MUART_voidRecieveString+0x42>
		{
			ReceivedString[i] = ReceivedChar;
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	ce 01       	movw	r24, r28
    107e:	03 96       	adiw	r24, 0x03	; 3
    1080:	fc 01       	movw	r30, r24
    1082:	e2 0f       	add	r30, r18
    1084:	f3 1f       	adc	r31, r19
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	80 83       	st	Z, r24
			i++;
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	8f 5f       	subi	r24, 0xFF	; 255
    108e:	8a 83       	std	Y+2, r24	; 0x02
		}
	} while (ReceivedChar != '\r');
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	8d 30       	cpi	r24, 0x0D	; 13
    1094:	39 f7       	brne	.-50     	; 0x1064 <MUART_voidRecieveString+0x16>

	ReceivedString[i] = '\0';
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	ce 01       	movw	r24, r28
    109e:	03 96       	adiw	r24, 0x03	; 3
    10a0:	fc 01       	movw	r30, r24
    10a2:	e2 0f       	add	r30, r18
    10a4:	f3 1f       	adc	r31, r19
    10a6:	10 82       	st	Z, r1
	return ReceivedString;
    10a8:	ce 01       	movw	r24, r28
    10aa:	03 96       	adiw	r24, 0x03	; 3
}
    10ac:	e4 96       	adiw	r28, 0x34	; 52
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <MUART_voidSendNumber>:

void MUART_voidSendNumber(u32 A_u32Number)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	6f 97       	sbiw	r28, 0x1f	; 31
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	6c 8f       	std	Y+28, r22	; 0x1c
    10d4:	7d 8f       	std	Y+29, r23	; 0x1d
    10d6:	8e 8f       	std	Y+30, r24	; 0x1e
    10d8:	9f 8f       	std	Y+31, r25	; 0x1f
	if (A_u32Number == 0) {
    10da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10de:	ae 8d       	ldd	r26, Y+30	; 0x1e
    10e0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	a1 05       	cpc	r26, r1
    10e6:	b1 05       	cpc	r27, r1
    10e8:	21 f4       	brne	.+8      	; 0x10f2 <MUART_voidSendNumber+0x34>
	        MUART_voidTransmitData('0');
    10ea:	80 e3       	ldi	r24, 0x30	; 48
    10ec:	0e 94 6e 07 	call	0xedc	; 0xedc <MUART_voidTransmitData>
    10f0:	bf c0       	rjmp	.+382    	; 0x1270 <MUART_voidSendNumber+0x1b2>
	        return;
	    }

	    u8 NumberString[11];
	    u8 i = 0;
    10f2:	18 8a       	std	Y+16, r1	; 0x10
    10f4:	30 c0       	rjmp	.+96     	; 0x1156 <MUART_voidSendNumber+0x98>

	    while (A_u32Number > 0) {
	        u8 digit = A_u32Number % 10;
    10f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10fa:	ae 8d       	ldd	r26, Y+30	; 0x1e
    10fc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    10fe:	2a e0       	ldi	r18, 0x0A	; 10
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodsi4>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	8f 87       	std	Y+15, r24	; 0x0f
	        NumberString[i] = digit + '0';
    1114:	88 89       	ldd	r24, Y+16	; 0x10
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	8f 85       	ldd	r24, Y+15	; 0x0f
    111c:	48 2f       	mov	r20, r24
    111e:	40 5d       	subi	r20, 0xD0	; 208
    1120:	ce 01       	movw	r24, r28
    1122:	41 96       	adiw	r24, 0x11	; 17
    1124:	fc 01       	movw	r30, r24
    1126:	e2 0f       	add	r30, r18
    1128:	f3 1f       	adc	r31, r19
    112a:	40 83       	st	Z, r20
	        A_u32Number /= 10;
    112c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    112e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1130:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1132:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1134:	2a e0       	ldi	r18, 0x0A	; 10
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	bc 01       	movw	r22, r24
    113e:	cd 01       	movw	r24, r26
    1140:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__udivmodsi4>
    1144:	da 01       	movw	r26, r20
    1146:	c9 01       	movw	r24, r18
    1148:	8c 8f       	std	Y+28, r24	; 0x1c
    114a:	9d 8f       	std	Y+29, r25	; 0x1d
    114c:	ae 8f       	std	Y+30, r26	; 0x1e
    114e:	bf 8f       	std	Y+31, r27	; 0x1f
	        i++;
    1150:	88 89       	ldd	r24, Y+16	; 0x10
    1152:	8f 5f       	subi	r24, 0xFF	; 255
    1154:	88 8b       	std	Y+16, r24	; 0x10
	    }

	    u8 NumberString[11];
	    u8 i = 0;

	    while (A_u32Number > 0) {
    1156:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1158:	9d 8d       	ldd	r25, Y+29	; 0x1d
    115a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    115c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	a1 05       	cpc	r26, r1
    1162:	b1 05       	cpc	r27, r1
    1164:	41 f6       	brne	.-112    	; 0x10f6 <MUART_voidSendNumber+0x38>
    1166:	80 c0       	rjmp	.+256    	; 0x1268 <MUART_voidSendNumber+0x1aa>
	        A_u32Number /= 10;
	        i++;
	    }

	    while (i > 0) {
	        i--;
    1168:	88 89       	ldd	r24, Y+16	; 0x10
    116a:	81 50       	subi	r24, 0x01	; 1
    116c:	88 8b       	std	Y+16, r24	; 0x10
	        MUART_voidTransmitData(NumberString[i]);
    116e:	88 89       	ldd	r24, Y+16	; 0x10
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	ce 01       	movw	r24, r28
    1176:	41 96       	adiw	r24, 0x11	; 17
    1178:	fc 01       	movw	r30, r24
    117a:	e2 0f       	add	r30, r18
    117c:	f3 1f       	adc	r31, r19
    117e:	80 81       	ld	r24, Z
    1180:	0e 94 6e 07 	call	0xedc	; 0xedc <MUART_voidTransmitData>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a8 ec       	ldi	r26, 0xC8	; 200
    118a:	b1 e4       	ldi	r27, 0x41	; 65
    118c:	8b 87       	std	Y+11, r24	; 0x0b
    118e:	9c 87       	std	Y+12, r25	; 0x0c
    1190:	ad 87       	std	Y+13, r26	; 0x0d
    1192:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1194:	6b 85       	ldd	r22, Y+11	; 0x0b
    1196:	7c 85       	ldd	r23, Y+12	; 0x0c
    1198:	8d 85       	ldd	r24, Y+13	; 0x0d
    119a:	9e 85       	ldd	r25, Y+14	; 0x0e
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	4a e7       	ldi	r20, 0x7A	; 122
    11a2:	55 e4       	ldi	r21, 0x45	; 69
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	8f 83       	std	Y+7, r24	; 0x07
    11ae:	98 87       	std	Y+8, r25	; 0x08
    11b0:	a9 87       	std	Y+9, r26	; 0x09
    11b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11b4:	6f 81       	ldd	r22, Y+7	; 0x07
    11b6:	78 85       	ldd	r23, Y+8	; 0x08
    11b8:	89 85       	ldd	r24, Y+9	; 0x09
    11ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e8       	ldi	r20, 0x80	; 128
    11c2:	5f e3       	ldi	r21, 0x3F	; 63
    11c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <MUART_voidSendNumber+0x118>
		__ticks = 1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	9e 83       	std	Y+6, r25	; 0x06
    11d2:	8d 83       	std	Y+5, r24	; 0x05
    11d4:	3f c0       	rjmp	.+126    	; 0x1254 <MUART_voidSendNumber+0x196>
	else if (__tmp > 65535)
    11d6:	6f 81       	ldd	r22, Y+7	; 0x07
    11d8:	78 85       	ldd	r23, Y+8	; 0x08
    11da:	89 85       	ldd	r24, Y+9	; 0x09
    11dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	3f ef       	ldi	r19, 0xFF	; 255
    11e2:	4f e7       	ldi	r20, 0x7F	; 127
    11e4:	57 e4       	ldi	r21, 0x47	; 71
    11e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ea:	18 16       	cp	r1, r24
    11ec:	4c f5       	brge	.+82     	; 0x1240 <MUART_voidSendNumber+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e2       	ldi	r20, 0x20	; 32
    11fc:	51 e4       	ldi	r21, 0x41	; 65
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	bc 01       	movw	r22, r24
    1208:	cd 01       	movw	r24, r26
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
    1216:	0f c0       	rjmp	.+30     	; 0x1236 <MUART_voidSendNumber+0x178>
    1218:	80 e9       	ldi	r24, 0x90	; 144
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	9c 83       	std	Y+4, r25	; 0x04
    121e:	8b 83       	std	Y+3, r24	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <MUART_voidSendNumber+0x166>
    1228:	9c 83       	std	Y+4, r25	; 0x04
    122a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	9e 83       	std	Y+6, r25	; 0x06
    1234:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	69 f7       	brne	.-38     	; 0x1218 <MUART_voidSendNumber+0x15a>
    123e:	14 c0       	rjmp	.+40     	; 0x1268 <MUART_voidSendNumber+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1240:	6f 81       	ldd	r22, Y+7	; 0x07
    1242:	78 85       	ldd	r23, Y+8	; 0x08
    1244:	89 85       	ldd	r24, Y+9	; 0x09
    1246:	9a 85       	ldd	r25, Y+10	; 0x0a
    1248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	9e 83       	std	Y+6, r25	; 0x06
    1252:	8d 83       	std	Y+5, r24	; 0x05
    1254:	8d 81       	ldd	r24, Y+5	; 0x05
    1256:	9e 81       	ldd	r25, Y+6	; 0x06
    1258:	9a 83       	std	Y+2, r25	; 0x02
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <MUART_voidSendNumber+0x1a2>
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	89 83       	std	Y+1, r24	; 0x01
	        NumberString[i] = digit + '0';
	        A_u32Number /= 10;
	        i++;
	    }

	    while (i > 0) {
    1268:	88 89       	ldd	r24, Y+16	; 0x10
    126a:	88 23       	and	r24, r24
    126c:	09 f0       	breq	.+2      	; 0x1270 <MUART_voidSendNumber+0x1b2>
    126e:	7c cf       	rjmp	.-264    	; 0x1168 <MUART_voidSendNumber+0xaa>
	        i--;
	        MUART_voidTransmitData(NumberString[i]);
	        _delay_ms(25) ;
	    }
}
    1270:	6f 96       	adiw	r28, 0x1f	; 31
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <MTIMER1_voidInitFastPwm>:
#include "MTIMERS_Config.h"

/************************** TIMER_1 ***********************************/

void MTIMER1_voidInitFastPwm()
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	/* set OC1A as output pin */
	SET_BIT(DDRD,5);
    128a:	a1 e3       	ldi	r26, 0x31	; 49
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e1 e3       	ldi	r30, 0x31	; 49
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 62       	ori	r24, 0x20	; 32
    1296:	8c 93       	st	X, r24

	/* select fast PWM mode with TOP:ICR1*/
	CLR_BIT(TCCR1A,WGM10);
    1298:	af e4       	ldi	r26, 0x4F	; 79
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	ef e4       	ldi	r30, 0x4F	; 79
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8e 7f       	andi	r24, 0xFE	; 254
    12a4:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    12a6:	af e4       	ldi	r26, 0x4F	; 79
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	ef e4       	ldi	r30, 0x4F	; 79
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	82 60       	ori	r24, 0x02	; 2
    12b2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    12b4:	ae e4       	ldi	r26, 0x4E	; 78
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ee e4       	ldi	r30, 0x4E	; 78
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	88 60       	ori	r24, 0x08	; 8
    12c0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    12c2:	ae e4       	ldi	r26, 0x4E	; 78
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ee e4       	ldi	r30, 0x4E	; 78
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	80 61       	ori	r24, 0x10	; 16
    12ce:	8c 93       	st	X, r24

	/* load a value in ICR1 */
	ICR1=19999;
    12d0:	e6 e4       	ldi	r30, 0x46	; 70
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8f e1       	ldi	r24, 0x1F	; 31
    12d6:	9e e4       	ldi	r25, 0x4E	; 78
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	80 83       	st	Z, r24

	/* select timer TIMER1_PRESCALLER = 8*/
	TCCR1B= (TCCR1B &0b11111000) | TIMER1_PRESCALLER ;
    12dc:	ae e4       	ldi	r26, 0x4E	; 78
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	ee e4       	ldi	r30, 0x4E	; 78
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	88 7f       	andi	r24, 0xF8	; 248
    12e8:	82 60       	ori	r24, 0x02	; 2
    12ea:	8c 93       	st	X, r24

	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1A1);
    12ec:	af e4       	ldi	r26, 0x4F	; 79
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ef e4       	ldi	r30, 0x4F	; 79
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	80 68       	ori	r24, 0x80	; 128
    12f8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    12fa:	af e4       	ldi	r26, 0x4F	; 79
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ef e4       	ldi	r30, 0x4F	; 79
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	80 62       	ori	r24, 0x20	; 32
    1306:	8c 93       	st	X, r24

	// initialize counter
	TCNT1 = 0 ;
    1308:	ec e4       	ldi	r30, 0x4C	; 76
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	11 82       	std	Z+1, r1	; 0x01
    130e:	10 82       	st	Z, r1
}
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <MTIMER1_voidSetPinACompareMatch>:

void MTIMER1_voidSetPinACompareMatch(u16 Copy_u16Value)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <MTIMER1_voidSetPinACompareMatch+0x6>
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	9a 83       	std	Y+2, r25	; 0x02
    1322:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16Value ;
    1324:	ea e4       	ldi	r30, 0x4A	; 74
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	91 83       	std	Z+1, r25	; 0x01
    132e:	80 83       	st	Z, r24
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <MDIO_voidSetPinDirection>:
 */

#include "MDIO.h"
#include "../../LIB/BIT_MATH.h"
void MDIO_voidSetPinDirection(port A_PortName,pin A_PinNO,u8 A_u8Direction)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	2d 97       	sbiw	r28, 0x0d	; 13
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	6a 83       	std	Y+2, r22	; 0x02
    1352:	4b 83       	std	Y+3, r20	; 0x03
if((A_PortName <= MDIO_PORTD)&&(A_PinNO <= PIN7)&&(A_u8Direction <= OUTPUT)){
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	84 30       	cpi	r24, 0x04	; 4
    1358:	08 f0       	brcs	.+2      	; 0x135c <MDIO_voidSetPinDirection+0x22>
    135a:	08 c1       	rjmp	.+528    	; 0x156c <MDIO_voidSetPinDirection+0x232>
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	88 30       	cpi	r24, 0x08	; 8
    1360:	08 f0       	brcs	.+2      	; 0x1364 <MDIO_voidSetPinDirection+0x2a>
    1362:	04 c1       	rjmp	.+520    	; 0x156c <MDIO_voidSetPinDirection+0x232>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	08 f0       	brcs	.+2      	; 0x136c <MDIO_voidSetPinDirection+0x32>
    136a:	00 c1       	rjmp	.+512    	; 0x156c <MDIO_voidSetPinDirection+0x232>

	switch(A_PortName)
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	3d 87       	std	Y+13, r19	; 0x0d
    1374:	2c 87       	std	Y+12, r18	; 0x0c
    1376:	8c 85       	ldd	r24, Y+12	; 0x0c
    1378:	9d 85       	ldd	r25, Y+13	; 0x0d
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	91 05       	cpc	r25, r1
    137e:	09 f4       	brne	.+2      	; 0x1382 <MDIO_voidSetPinDirection+0x48>
    1380:	4f c0       	rjmp	.+158    	; 0x1420 <MDIO_voidSetPinDirection+0xe6>
    1382:	2c 85       	ldd	r18, Y+12	; 0x0c
    1384:	3d 85       	ldd	r19, Y+13	; 0x0d
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	2c f4       	brge	.+10     	; 0x1396 <MDIO_voidSetPinDirection+0x5c>
    138c:	8c 85       	ldd	r24, Y+12	; 0x0c
    138e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	71 f0       	breq	.+28     	; 0x13b0 <MDIO_voidSetPinDirection+0x76>
    1394:	eb c0       	rjmp	.+470    	; 0x156c <MDIO_voidSetPinDirection+0x232>
    1396:	2c 85       	ldd	r18, Y+12	; 0x0c
    1398:	3d 85       	ldd	r19, Y+13	; 0x0d
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <MDIO_voidSetPinDirection+0x68>
    13a0:	77 c0       	rjmp	.+238    	; 0x1490 <MDIO_voidSetPinDirection+0x156>
    13a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    13a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	91 05       	cpc	r25, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <MDIO_voidSetPinDirection+0x74>
    13ac:	a9 c0       	rjmp	.+338    	; 0x1500 <MDIO_voidSetPinDirection+0x1c6>
    13ae:	de c0       	rjmp	.+444    	; 0x156c <MDIO_voidSetPinDirection+0x232>
	{


		case MDIO_PORTA:
					switch(A_u8Direction)
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3b 87       	std	Y+11, r19	; 0x0b
    13b8:	2a 87       	std	Y+10, r18	; 0x0a
    13ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    13bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	d1 f0       	breq	.+52     	; 0x13f6 <MDIO_voidSetPinDirection+0xbc>
    13c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    13c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    13c6:	21 30       	cpi	r18, 0x01	; 1
    13c8:	31 05       	cpc	r19, r1
    13ca:	09 f0       	breq	.+2      	; 0x13ce <MDIO_voidSetPinDirection+0x94>
    13cc:	cf c0       	rjmp	.+414    	; 0x156c <MDIO_voidSetPinDirection+0x232>
					{
						case OUTPUT: SET_BIT(DDRA,A_PinNO); break;
    13ce:	aa e3       	ldi	r26, 0x3A	; 58
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	ea e3       	ldi	r30, 0x3A	; 58
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <MDIO_voidSetPinDirection+0xb2>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <MDIO_voidSetPinDirection+0xae>
    13f0:	84 2b       	or	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	bb c0       	rjmp	.+374    	; 0x156c <MDIO_voidSetPinDirection+0x232>
						case INPUT:  CLR_BIT(DDRA,A_PinNO); break;
    13f6:	aa e3       	ldi	r26, 0x3A	; 58
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	ea e3       	ldi	r30, 0x3A	; 58
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <MDIO_voidSetPinDirection+0xda>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <MDIO_voidSetPinDirection+0xd6>
    1418:	80 95       	com	r24
    141a:	84 23       	and	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	a6 c0       	rjmp	.+332    	; 0x156c <MDIO_voidSetPinDirection+0x232>
					}break;

		case MDIO_PORTB:
					switch(A_u8Direction)
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	39 87       	std	Y+9, r19	; 0x09
    1428:	28 87       	std	Y+8, r18	; 0x08
    142a:	88 85       	ldd	r24, Y+8	; 0x08
    142c:	99 85       	ldd	r25, Y+9	; 0x09
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	d1 f0       	breq	.+52     	; 0x1466 <MDIO_voidSetPinDirection+0x12c>
    1432:	28 85       	ldd	r18, Y+8	; 0x08
    1434:	39 85       	ldd	r19, Y+9	; 0x09
    1436:	21 30       	cpi	r18, 0x01	; 1
    1438:	31 05       	cpc	r19, r1
    143a:	09 f0       	breq	.+2      	; 0x143e <MDIO_voidSetPinDirection+0x104>
    143c:	97 c0       	rjmp	.+302    	; 0x156c <MDIO_voidSetPinDirection+0x232>
					{
						case OUTPUT: SET_BIT(DDRB,A_PinNO); break;
    143e:	a7 e3       	ldi	r26, 0x37	; 55
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e7 e3       	ldi	r30, 0x37	; 55
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <MDIO_voidSetPinDirection+0x122>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <MDIO_voidSetPinDirection+0x11e>
    1460:	84 2b       	or	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	83 c0       	rjmp	.+262    	; 0x156c <MDIO_voidSetPinDirection+0x232>
						case INPUT:  CLR_BIT(DDRB,A_PinNO); break;
    1466:	a7 e3       	ldi	r26, 0x37	; 55
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e7 e3       	ldi	r30, 0x37	; 55
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <MDIO_voidSetPinDirection+0x14a>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <MDIO_voidSetPinDirection+0x146>
    1488:	80 95       	com	r24
    148a:	84 23       	and	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	6e c0       	rjmp	.+220    	; 0x156c <MDIO_voidSetPinDirection+0x232>
					}break;

		case MDIO_PORTC:
					switch(A_u8Direction)
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3f 83       	std	Y+7, r19	; 0x07
    1498:	2e 83       	std	Y+6, r18	; 0x06
    149a:	8e 81       	ldd	r24, Y+6	; 0x06
    149c:	9f 81       	ldd	r25, Y+7	; 0x07
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	d1 f0       	breq	.+52     	; 0x14d6 <MDIO_voidSetPinDirection+0x19c>
    14a2:	2e 81       	ldd	r18, Y+6	; 0x06
    14a4:	3f 81       	ldd	r19, Y+7	; 0x07
    14a6:	21 30       	cpi	r18, 0x01	; 1
    14a8:	31 05       	cpc	r19, r1
    14aa:	09 f0       	breq	.+2      	; 0x14ae <MDIO_voidSetPinDirection+0x174>
    14ac:	5f c0       	rjmp	.+190    	; 0x156c <MDIO_voidSetPinDirection+0x232>
					{
						case OUTPUT: SET_BIT(DDRC,A_PinNO); break;
    14ae:	a4 e3       	ldi	r26, 0x34	; 52
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e4 e3       	ldi	r30, 0x34	; 52
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <MDIO_voidSetPinDirection+0x192>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <MDIO_voidSetPinDirection+0x18e>
    14d0:	84 2b       	or	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	4b c0       	rjmp	.+150    	; 0x156c <MDIO_voidSetPinDirection+0x232>
						case INPUT:  CLR_BIT(DDRC,A_PinNO); break;
    14d6:	a4 e3       	ldi	r26, 0x34	; 52
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e4 e3       	ldi	r30, 0x34	; 52
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <MDIO_voidSetPinDirection+0x1ba>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <MDIO_voidSetPinDirection+0x1b6>
    14f8:	80 95       	com	r24
    14fa:	84 23       	and	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	36 c0       	rjmp	.+108    	; 0x156c <MDIO_voidSetPinDirection+0x232>
					}break;

		case MDIO_PORTD:
					switch(A_u8Direction)
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	3d 83       	std	Y+5, r19	; 0x05
    1508:	2c 83       	std	Y+4, r18	; 0x04
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	c9 f0       	breq	.+50     	; 0x1544 <MDIO_voidSetPinDirection+0x20a>
    1512:	2c 81       	ldd	r18, Y+4	; 0x04
    1514:	3d 81       	ldd	r19, Y+5	; 0x05
    1516:	21 30       	cpi	r18, 0x01	; 1
    1518:	31 05       	cpc	r19, r1
    151a:	41 f5       	brne	.+80     	; 0x156c <MDIO_voidSetPinDirection+0x232>
					{
						case OUTPUT: SET_BIT(DDRD,A_PinNO); break;
    151c:	a1 e3       	ldi	r26, 0x31	; 49
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e1 e3       	ldi	r30, 0x31	; 49
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <MDIO_voidSetPinDirection+0x200>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <MDIO_voidSetPinDirection+0x1fc>
    153e:	84 2b       	or	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	14 c0       	rjmp	.+40     	; 0x156c <MDIO_voidSetPinDirection+0x232>
						case INPUT:  CLR_BIT(DDRD,A_PinNO); break;
    1544:	a1 e3       	ldi	r26, 0x31	; 49
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e1 e3       	ldi	r30, 0x31	; 49
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <MDIO_voidSetPinDirection+0x228>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <MDIO_voidSetPinDirection+0x224>
    1566:	80 95       	com	r24
    1568:	84 23       	and	r24, r20
    156a:	8c 93       	st	X, r24
					}break;

	} /*end if*/}
}
    156c:	2d 96       	adiw	r28, 0x0d	; 13
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(port A_PortName,pin A_PinNO,u8 A_u8Value)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	2d 97       	sbiw	r28, 0x0d	; 13
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	6a 83       	std	Y+2, r22	; 0x02
    1596:	4b 83       	std	Y+3, r20	; 0x03
if((A_PortName <= MDIO_PORTD)&&(A_PinNO <= PIN7)&&(A_u8Value <= HIGH)){
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	84 30       	cpi	r24, 0x04	; 4
    159c:	08 f0       	brcs	.+2      	; 0x15a0 <MDIO_voidSetPinValue+0x22>
    159e:	08 c1       	rjmp	.+528    	; 0x17b0 <MDIO_voidSetPinValue+0x232>
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	88 30       	cpi	r24, 0x08	; 8
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <MDIO_voidSetPinValue+0x2a>
    15a6:	04 c1       	rjmp	.+520    	; 0x17b0 <MDIO_voidSetPinValue+0x232>
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	08 f0       	brcs	.+2      	; 0x15b0 <MDIO_voidSetPinValue+0x32>
    15ae:	00 c1       	rjmp	.+512    	; 0x17b0 <MDIO_voidSetPinValue+0x232>

	switch(A_PortName)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3d 87       	std	Y+13, r19	; 0x0d
    15b8:	2c 87       	std	Y+12, r18	; 0x0c
    15ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    15bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	91 05       	cpc	r25, r1
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <MDIO_voidSetPinValue+0x48>
    15c4:	4f c0       	rjmp	.+158    	; 0x1664 <MDIO_voidSetPinValue+0xe6>
    15c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    15c8:	3d 85       	ldd	r19, Y+13	; 0x0d
    15ca:	22 30       	cpi	r18, 0x02	; 2
    15cc:	31 05       	cpc	r19, r1
    15ce:	2c f4       	brge	.+10     	; 0x15da <MDIO_voidSetPinValue+0x5c>
    15d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	71 f0       	breq	.+28     	; 0x15f4 <MDIO_voidSetPinValue+0x76>
    15d8:	eb c0       	rjmp	.+470    	; 0x17b0 <MDIO_voidSetPinValue+0x232>
    15da:	2c 85       	ldd	r18, Y+12	; 0x0c
    15dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <MDIO_voidSetPinValue+0x68>
    15e4:	77 c0       	rjmp	.+238    	; 0x16d4 <MDIO_voidSetPinValue+0x156>
    15e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    15e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	91 05       	cpc	r25, r1
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <MDIO_voidSetPinValue+0x74>
    15f0:	a9 c0       	rjmp	.+338    	; 0x1744 <MDIO_voidSetPinValue+0x1c6>
    15f2:	de c0       	rjmp	.+444    	; 0x17b0 <MDIO_voidSetPinValue+0x232>
	{
		case MDIO_PORTA:
					switch(A_u8Value)
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	3b 87       	std	Y+11, r19	; 0x0b
    15fc:	2a 87       	std	Y+10, r18	; 0x0a
    15fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1600:	9b 85       	ldd	r25, Y+11	; 0x0b
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	d1 f0       	breq	.+52     	; 0x163a <MDIO_voidSetPinValue+0xbc>
    1606:	2a 85       	ldd	r18, Y+10	; 0x0a
    1608:	3b 85       	ldd	r19, Y+11	; 0x0b
    160a:	21 30       	cpi	r18, 0x01	; 1
    160c:	31 05       	cpc	r19, r1
    160e:	09 f0       	breq	.+2      	; 0x1612 <MDIO_voidSetPinValue+0x94>
    1610:	cf c0       	rjmp	.+414    	; 0x17b0 <MDIO_voidSetPinValue+0x232>
					{
						case HIGH: SET_BIT(PORTA,A_PinNO); break;
    1612:	ab e3       	ldi	r26, 0x3B	; 59
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	eb e3       	ldi	r30, 0x3B	; 59
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 2e       	mov	r0, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <MDIO_voidSetPinValue+0xb2>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	0a 94       	dec	r0
    1632:	e2 f7       	brpl	.-8      	; 0x162c <MDIO_voidSetPinValue+0xae>
    1634:	84 2b       	or	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	bb c0       	rjmp	.+374    	; 0x17b0 <MDIO_voidSetPinValue+0x232>
						case LOW:  CLR_BIT(PORTA,A_PinNO); break;
    163a:	ab e3       	ldi	r26, 0x3B	; 59
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	eb e3       	ldi	r30, 0x3B	; 59
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <MDIO_voidSetPinValue+0xda>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <MDIO_voidSetPinValue+0xd6>
    165c:	80 95       	com	r24
    165e:	84 23       	and	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	a6 c0       	rjmp	.+332    	; 0x17b0 <MDIO_voidSetPinValue+0x232>
					}break;

		case MDIO_PORTB:
					switch(A_u8Value)
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	39 87       	std	Y+9, r19	; 0x09
    166c:	28 87       	std	Y+8, r18	; 0x08
    166e:	88 85       	ldd	r24, Y+8	; 0x08
    1670:	99 85       	ldd	r25, Y+9	; 0x09
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	d1 f0       	breq	.+52     	; 0x16aa <MDIO_voidSetPinValue+0x12c>
    1676:	28 85       	ldd	r18, Y+8	; 0x08
    1678:	39 85       	ldd	r19, Y+9	; 0x09
    167a:	21 30       	cpi	r18, 0x01	; 1
    167c:	31 05       	cpc	r19, r1
    167e:	09 f0       	breq	.+2      	; 0x1682 <MDIO_voidSetPinValue+0x104>
    1680:	97 c0       	rjmp	.+302    	; 0x17b0 <MDIO_voidSetPinValue+0x232>
					{
						case HIGH: SET_BIT(PORTB,A_PinNO); break;
    1682:	a8 e3       	ldi	r26, 0x38	; 56
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e8 e3       	ldi	r30, 0x38	; 56
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <MDIO_voidSetPinValue+0x122>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <MDIO_voidSetPinValue+0x11e>
    16a4:	84 2b       	or	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	83 c0       	rjmp	.+262    	; 0x17b0 <MDIO_voidSetPinValue+0x232>
						case LOW:  CLR_BIT(PORTB,A_PinNO); break;
    16aa:	a8 e3       	ldi	r26, 0x38	; 56
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e8 e3       	ldi	r30, 0x38	; 56
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <MDIO_voidSetPinValue+0x14a>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <MDIO_voidSetPinValue+0x146>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	6e c0       	rjmp	.+220    	; 0x17b0 <MDIO_voidSetPinValue+0x232>
					}break;

		case MDIO_PORTC:
					switch(A_u8Value)
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	3f 83       	std	Y+7, r19	; 0x07
    16dc:	2e 83       	std	Y+6, r18	; 0x06
    16de:	8e 81       	ldd	r24, Y+6	; 0x06
    16e0:	9f 81       	ldd	r25, Y+7	; 0x07
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	d1 f0       	breq	.+52     	; 0x171a <MDIO_voidSetPinValue+0x19c>
    16e6:	2e 81       	ldd	r18, Y+6	; 0x06
    16e8:	3f 81       	ldd	r19, Y+7	; 0x07
    16ea:	21 30       	cpi	r18, 0x01	; 1
    16ec:	31 05       	cpc	r19, r1
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <MDIO_voidSetPinValue+0x174>
    16f0:	5f c0       	rjmp	.+190    	; 0x17b0 <MDIO_voidSetPinValue+0x232>
					{
						case HIGH: SET_BIT(PORTC,A_PinNO); break;
    16f2:	a5 e3       	ldi	r26, 0x35	; 53
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e5 e3       	ldi	r30, 0x35	; 53
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <MDIO_voidSetPinValue+0x192>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <MDIO_voidSetPinValue+0x18e>
    1714:	84 2b       	or	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	4b c0       	rjmp	.+150    	; 0x17b0 <MDIO_voidSetPinValue+0x232>
						case LOW:  CLR_BIT(PORTC,A_PinNO); break;
    171a:	a5 e3       	ldi	r26, 0x35	; 53
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e5 e3       	ldi	r30, 0x35	; 53
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <MDIO_voidSetPinValue+0x1ba>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <MDIO_voidSetPinValue+0x1b6>
    173c:	80 95       	com	r24
    173e:	84 23       	and	r24, r20
    1740:	8c 93       	st	X, r24
    1742:	36 c0       	rjmp	.+108    	; 0x17b0 <MDIO_voidSetPinValue+0x232>
					}break;

		case MDIO_PORTD:
					switch(A_u8Value)
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	3d 83       	std	Y+5, r19	; 0x05
    174c:	2c 83       	std	Y+4, r18	; 0x04
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	c9 f0       	breq	.+50     	; 0x1788 <MDIO_voidSetPinValue+0x20a>
    1756:	2c 81       	ldd	r18, Y+4	; 0x04
    1758:	3d 81       	ldd	r19, Y+5	; 0x05
    175a:	21 30       	cpi	r18, 0x01	; 1
    175c:	31 05       	cpc	r19, r1
    175e:	41 f5       	brne	.+80     	; 0x17b0 <MDIO_voidSetPinValue+0x232>
					{
						case HIGH: SET_BIT(PORTD,A_PinNO); break;
    1760:	a2 e3       	ldi	r26, 0x32	; 50
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e2 e3       	ldi	r30, 0x32	; 50
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <MDIO_voidSetPinValue+0x200>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <MDIO_voidSetPinValue+0x1fc>
    1782:	84 2b       	or	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <MDIO_voidSetPinValue+0x232>
						case LOW:  CLR_BIT(PORTD,A_PinNO); break;
    1788:	a2 e3       	ldi	r26, 0x32	; 50
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e2 e3       	ldi	r30, 0x32	; 50
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <MDIO_voidSetPinValue+0x228>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <MDIO_voidSetPinValue+0x224>
    17aa:	80 95       	com	r24
    17ac:	84 23       	and	r24, r20
    17ae:	8c 93       	st	X, r24
					}break;

	}/*end if*/}
}
    17b0:	2d 96       	adiw	r28, 0x0d	; 13
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <MDIO_U8ReadPinValue>:

u8 MDIO_U8ReadPinValue(port A_PortName,pin A_PinNO)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <MDIO_U8ReadPinValue+0x6>
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <MDIO_U8ReadPinValue+0x8>
    17ca:	0f 92       	push	r0
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	8a 83       	std	Y+2, r24	; 0x02
    17d2:	6b 83       	std	Y+3, r22	; 0x03
u8 L_u8PinValue=3;
    17d4:	83 e0       	ldi	r24, 0x03	; 3
    17d6:	89 83       	std	Y+1, r24	; 0x01

if((A_PortName <= MDIO_PORTD)&&(A_PinNO <= PIN7)){
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	84 30       	cpi	r24, 0x04	; 4
    17dc:	08 f0       	brcs	.+2      	; 0x17e0 <MDIO_U8ReadPinValue+0x1e>
    17de:	6b c0       	rjmp	.+214    	; 0x18b6 <MDIO_U8ReadPinValue+0xf4>
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	88 30       	cpi	r24, 0x08	; 8
    17e4:	08 f0       	brcs	.+2      	; 0x17e8 <MDIO_U8ReadPinValue+0x26>
    17e6:	67 c0       	rjmp	.+206    	; 0x18b6 <MDIO_U8ReadPinValue+0xf4>

	switch(A_PortName)
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	3d 83       	std	Y+5, r19	; 0x05
    17f0:	2c 83       	std	Y+4, r18	; 0x04
    17f2:	4c 81       	ldd	r20, Y+4	; 0x04
    17f4:	5d 81       	ldd	r21, Y+5	; 0x05
    17f6:	41 30       	cpi	r20, 0x01	; 1
    17f8:	51 05       	cpc	r21, r1
    17fa:	41 f1       	breq	.+80     	; 0x184c <MDIO_U8ReadPinValue+0x8a>
    17fc:	8c 81       	ldd	r24, Y+4	; 0x04
    17fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1800:	82 30       	cpi	r24, 0x02	; 2
    1802:	91 05       	cpc	r25, r1
    1804:	34 f4       	brge	.+12     	; 0x1812 <MDIO_U8ReadPinValue+0x50>
    1806:	2c 81       	ldd	r18, Y+4	; 0x04
    1808:	3d 81       	ldd	r19, Y+5	; 0x05
    180a:	21 15       	cp	r18, r1
    180c:	31 05       	cpc	r19, r1
    180e:	61 f0       	breq	.+24     	; 0x1828 <MDIO_U8ReadPinValue+0x66>
    1810:	52 c0       	rjmp	.+164    	; 0x18b6 <MDIO_U8ReadPinValue+0xf4>
    1812:	4c 81       	ldd	r20, Y+4	; 0x04
    1814:	5d 81       	ldd	r21, Y+5	; 0x05
    1816:	42 30       	cpi	r20, 0x02	; 2
    1818:	51 05       	cpc	r21, r1
    181a:	51 f1       	breq	.+84     	; 0x1870 <MDIO_U8ReadPinValue+0xae>
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	9d 81       	ldd	r25, Y+5	; 0x05
    1820:	83 30       	cpi	r24, 0x03	; 3
    1822:	91 05       	cpc	r25, r1
    1824:	b9 f1       	breq	.+110    	; 0x1894 <MDIO_U8ReadPinValue+0xd2>
    1826:	47 c0       	rjmp	.+142    	; 0x18b6 <MDIO_U8ReadPinValue+0xf4>
	{
		case MDIO_PORTA: L_u8PinValue=READ_BIT(PINA,A_PinNO); break;
    1828:	e9 e3       	ldi	r30, 0x39	; 57
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	88 2f       	mov	r24, r24
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	a9 01       	movw	r20, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <MDIO_U8ReadPinValue+0x7e>
    183c:	55 95       	asr	r21
    183e:	47 95       	ror	r20
    1840:	8a 95       	dec	r24
    1842:	e2 f7       	brpl	.-8      	; 0x183c <MDIO_U8ReadPinValue+0x7a>
    1844:	ca 01       	movw	r24, r20
    1846:	81 70       	andi	r24, 0x01	; 1
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	35 c0       	rjmp	.+106    	; 0x18b6 <MDIO_U8ReadPinValue+0xf4>

		case MDIO_PORTB: L_u8PinValue=READ_BIT(PINB,A_PinNO); break;
    184c:	e6 e3       	ldi	r30, 0x36	; 54
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a9 01       	movw	r20, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <MDIO_U8ReadPinValue+0xa2>
    1860:	55 95       	asr	r21
    1862:	47 95       	ror	r20
    1864:	8a 95       	dec	r24
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <MDIO_U8ReadPinValue+0x9e>
    1868:	ca 01       	movw	r24, r20
    186a:	81 70       	andi	r24, 0x01	; 1
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	23 c0       	rjmp	.+70     	; 0x18b6 <MDIO_U8ReadPinValue+0xf4>

		case MDIO_PORTC: L_u8PinValue=READ_BIT(PINC,A_PinNO); break;
    1870:	e3 e3       	ldi	r30, 0x33	; 51
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	a9 01       	movw	r20, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <MDIO_U8ReadPinValue+0xc6>
    1884:	55 95       	asr	r21
    1886:	47 95       	ror	r20
    1888:	8a 95       	dec	r24
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <MDIO_U8ReadPinValue+0xc2>
    188c:	ca 01       	movw	r24, r20
    188e:	81 70       	andi	r24, 0x01	; 1
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	11 c0       	rjmp	.+34     	; 0x18b6 <MDIO_U8ReadPinValue+0xf4>

		case MDIO_PORTD: L_u8PinValue=READ_BIT(PIND,A_PinNO); break;
    1894:	e0 e3       	ldi	r30, 0x30	; 48
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	88 2f       	mov	r24, r24
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	a9 01       	movw	r20, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <MDIO_U8ReadPinValue+0xea>
    18a8:	55 95       	asr	r21
    18aa:	47 95       	ror	r20
    18ac:	8a 95       	dec	r24
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <MDIO_U8ReadPinValue+0xe6>
    18b0:	ca 01       	movw	r24, r20
    18b2:	81 70       	andi	r24, 0x01	; 1
    18b4:	89 83       	std	Y+1, r24	; 0x01

	}/*end if*/}
	return L_u8PinValue;
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue(port A_PortName,pin A_PinNO)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <MDIO_voidTogglePinValue+0x6>
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <MDIO_voidTogglePinValue+0x8>
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	6a 83       	std	Y+2, r22	; 0x02
if((A_PortName <= MDIO_PORTD)&&(A_PinNO <= PIN7)){
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	84 30       	cpi	r24, 0x04	; 4
    18dc:	08 f0       	brcs	.+2      	; 0x18e0 <MDIO_voidTogglePinValue+0x18>
    18de:	72 c0       	rjmp	.+228    	; 0x19c4 <MDIO_voidTogglePinValue+0xfc>
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	88 30       	cpi	r24, 0x08	; 8
    18e4:	08 f0       	brcs	.+2      	; 0x18e8 <MDIO_voidTogglePinValue+0x20>
    18e6:	6e c0       	rjmp	.+220    	; 0x19c4 <MDIO_voidTogglePinValue+0xfc>

	switch(A_PortName)
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	3c 83       	std	Y+4, r19	; 0x04
    18f0:	2b 83       	std	Y+3, r18	; 0x03
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	91 05       	cpc	r25, r1
    18fa:	49 f1       	breq	.+82     	; 0x194e <MDIO_voidTogglePinValue+0x86>
    18fc:	2b 81       	ldd	r18, Y+3	; 0x03
    18fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1900:	22 30       	cpi	r18, 0x02	; 2
    1902:	31 05       	cpc	r19, r1
    1904:	2c f4       	brge	.+10     	; 0x1910 <MDIO_voidTogglePinValue+0x48>
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	61 f0       	breq	.+24     	; 0x1926 <MDIO_voidTogglePinValue+0x5e>
    190e:	5a c0       	rjmp	.+180    	; 0x19c4 <MDIO_voidTogglePinValue+0xfc>
    1910:	2b 81       	ldd	r18, Y+3	; 0x03
    1912:	3c 81       	ldd	r19, Y+4	; 0x04
    1914:	22 30       	cpi	r18, 0x02	; 2
    1916:	31 05       	cpc	r19, r1
    1918:	71 f1       	breq	.+92     	; 0x1976 <MDIO_voidTogglePinValue+0xae>
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	83 30       	cpi	r24, 0x03	; 3
    1920:	91 05       	cpc	r25, r1
    1922:	e9 f1       	breq	.+122    	; 0x199e <MDIO_voidTogglePinValue+0xd6>
    1924:	4f c0       	rjmp	.+158    	; 0x19c4 <MDIO_voidTogglePinValue+0xfc>
	{
		case MDIO_PORTA: TOG_BIT(PORTA,A_PinNO); break;
    1926:	ab e3       	ldi	r26, 0x3B	; 59
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	eb e3       	ldi	r30, 0x3B	; 59
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	48 2f       	mov	r20, r24
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 2e       	mov	r0, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <MDIO_voidTogglePinValue+0x7c>
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	0a 94       	dec	r0
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <MDIO_voidTogglePinValue+0x78>
    1948:	84 27       	eor	r24, r20
    194a:	8c 93       	st	X, r24
    194c:	3b c0       	rjmp	.+118    	; 0x19c4 <MDIO_voidTogglePinValue+0xfc>

		case MDIO_PORTB: TOG_BIT(PORTA,A_PinNO); break;
    194e:	ab e3       	ldi	r26, 0x3B	; 59
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	eb e3       	ldi	r30, 0x3B	; 59
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	48 2f       	mov	r20, r24
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 2e       	mov	r0, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <MDIO_voidTogglePinValue+0xa4>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	0a 94       	dec	r0
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <MDIO_voidTogglePinValue+0xa0>
    1970:	84 27       	eor	r24, r20
    1972:	8c 93       	st	X, r24
    1974:	27 c0       	rjmp	.+78     	; 0x19c4 <MDIO_voidTogglePinValue+0xfc>

		case MDIO_PORTC: TOG_BIT(PORTA,A_PinNO); break;
    1976:	ab e3       	ldi	r26, 0x3B	; 59
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	eb e3       	ldi	r30, 0x3B	; 59
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <MDIO_voidTogglePinValue+0xcc>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <MDIO_voidTogglePinValue+0xc8>
    1998:	84 27       	eor	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	13 c0       	rjmp	.+38     	; 0x19c4 <MDIO_voidTogglePinValue+0xfc>

		case MDIO_PORTD: TOG_BIT(PORTA,A_PinNO); break;
    199e:	ab e3       	ldi	r26, 0x3B	; 59
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	eb e3       	ldi	r30, 0x3B	; 59
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <MDIO_voidTogglePinValue+0xf4>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <MDIO_voidTogglePinValue+0xf0>
    19c0:	84 27       	eor	r24, r20
    19c2:	8c 93       	st	X, r24

	}/*end if*/}
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(port A_PortName,u8 A_u8PortDirection)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <MDIO_voidSetPortDirection+0x6>
    19d8:	00 d0       	rcall	.+0      	; 0x19da <MDIO_voidSetPortDirection+0x8>
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	6a 83       	std	Y+2, r22	; 0x02
if((A_PortName <= MDIO_PORTD)&&(A_u8PortDirection <= 0xFF)){
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	84 30       	cpi	r24, 0x04	; 4
    19e6:	90 f5       	brcc	.+100    	; 0x1a4c <MDIO_voidSetPortDirection+0x7a>

	switch(A_PortName)
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	3c 83       	std	Y+4, r19	; 0x04
    19f0:	2b 83       	std	Y+3, r18	; 0x03
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	91 05       	cpc	r25, r1
    19fa:	d1 f0       	breq	.+52     	; 0x1a30 <MDIO_voidSetPortDirection+0x5e>
    19fc:	2b 81       	ldd	r18, Y+3	; 0x03
    19fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1a00:	22 30       	cpi	r18, 0x02	; 2
    1a02:	31 05       	cpc	r19, r1
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <MDIO_voidSetPortDirection+0x3e>
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	61 f0       	breq	.+24     	; 0x1a26 <MDIO_voidSetPortDirection+0x54>
    1a0e:	1e c0       	rjmp	.+60     	; 0x1a4c <MDIO_voidSetPortDirection+0x7a>
    1a10:	2b 81       	ldd	r18, Y+3	; 0x03
    1a12:	3c 81       	ldd	r19, Y+4	; 0x04
    1a14:	22 30       	cpi	r18, 0x02	; 2
    1a16:	31 05       	cpc	r19, r1
    1a18:	81 f0       	breq	.+32     	; 0x1a3a <MDIO_voidSetPortDirection+0x68>
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	83 30       	cpi	r24, 0x03	; 3
    1a20:	91 05       	cpc	r25, r1
    1a22:	81 f0       	breq	.+32     	; 0x1a44 <MDIO_voidSetPortDirection+0x72>
    1a24:	13 c0       	rjmp	.+38     	; 0x1a4c <MDIO_voidSetPortDirection+0x7a>
	{
		case MDIO_PORTA: DDRA=A_u8PortDirection; break;
    1a26:	ea e3       	ldi	r30, 0x3A	; 58
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	80 83       	st	Z, r24
    1a2e:	0e c0       	rjmp	.+28     	; 0x1a4c <MDIO_voidSetPortDirection+0x7a>

		case MDIO_PORTB: DDRB=A_u8PortDirection; break;
    1a30:	e7 e3       	ldi	r30, 0x37	; 55
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	80 83       	st	Z, r24
    1a38:	09 c0       	rjmp	.+18     	; 0x1a4c <MDIO_voidSetPortDirection+0x7a>

		case MDIO_PORTC: DDRC=A_u8PortDirection; break;
    1a3a:	e4 e3       	ldi	r30, 0x34	; 52
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	80 83       	st	Z, r24
    1a42:	04 c0       	rjmp	.+8      	; 0x1a4c <MDIO_voidSetPortDirection+0x7a>

		case MDIO_PORTD: DDRD=A_u8PortDirection; break;
    1a44:	e1 e3       	ldi	r30, 0x31	; 49
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	80 83       	st	Z, r24

	}/*end if*/}
}
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(port A_PortName,u8 A_u8PortValue)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <MDIO_voidSetPortValue+0x6>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <MDIO_voidSetPortValue+0x8>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	6a 83       	std	Y+2, r22	; 0x02
if((A_PortName <= MDIO_PORTD)&&(A_u8PortValue <= 0xFF)){
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	84 30       	cpi	r24, 0x04	; 4
    1a6e:	90 f5       	brcc	.+100    	; 0x1ad4 <MDIO_voidSetPortValue+0x7a>

	switch(A_PortName)
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	3c 83       	std	Y+4, r19	; 0x04
    1a78:	2b 83       	std	Y+3, r18	; 0x03
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	91 05       	cpc	r25, r1
    1a82:	d1 f0       	breq	.+52     	; 0x1ab8 <MDIO_voidSetPortValue+0x5e>
    1a84:	2b 81       	ldd	r18, Y+3	; 0x03
    1a86:	3c 81       	ldd	r19, Y+4	; 0x04
    1a88:	22 30       	cpi	r18, 0x02	; 2
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	2c f4       	brge	.+10     	; 0x1a98 <MDIO_voidSetPortValue+0x3e>
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	9c 81       	ldd	r25, Y+4	; 0x04
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	61 f0       	breq	.+24     	; 0x1aae <MDIO_voidSetPortValue+0x54>
    1a96:	1e c0       	rjmp	.+60     	; 0x1ad4 <MDIO_voidSetPortValue+0x7a>
    1a98:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9c:	22 30       	cpi	r18, 0x02	; 2
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	81 f0       	breq	.+32     	; 0x1ac2 <MDIO_voidSetPortValue+0x68>
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	83 30       	cpi	r24, 0x03	; 3
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	81 f0       	breq	.+32     	; 0x1acc <MDIO_voidSetPortValue+0x72>
    1aac:	13 c0       	rjmp	.+38     	; 0x1ad4 <MDIO_voidSetPortValue+0x7a>
	{
		case MDIO_PORTA: PORTA=A_u8PortValue; break;
    1aae:	eb e3       	ldi	r30, 0x3B	; 59
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	80 83       	st	Z, r24
    1ab6:	0e c0       	rjmp	.+28     	; 0x1ad4 <MDIO_voidSetPortValue+0x7a>

		case MDIO_PORTB: PORTB=A_u8PortValue; break;
    1ab8:	e8 e3       	ldi	r30, 0x38	; 56
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	80 83       	st	Z, r24
    1ac0:	09 c0       	rjmp	.+18     	; 0x1ad4 <MDIO_voidSetPortValue+0x7a>

		case MDIO_PORTC: PORTC=A_u8PortValue; break;
    1ac2:	e5 e3       	ldi	r30, 0x35	; 53
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	80 83       	st	Z, r24
    1aca:	04 c0       	rjmp	.+8      	; 0x1ad4 <MDIO_voidSetPortValue+0x7a>

		case MDIO_PORTD: PORTD=A_u8PortValue; break;
    1acc:	e2 e3       	ldi	r30, 0x32	; 50
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	80 83       	st	Z, r24

	}/*end if*/}
}
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <MDIO_U8ReadPortValue>:

u8 MDIO_U8ReadPortValue(port A_PortName)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <MDIO_U8ReadPortValue+0x6>
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <MDIO_U8ReadPortValue+0x8>
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	8a 83       	std	Y+2, r24	; 0x02
u8 L_u8PortValue=0;
    1af0:	19 82       	std	Y+1, r1	; 0x01

if(A_PortName <= MDIO_PORTD){
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	84 30       	cpi	r24, 0x04	; 4
    1af6:	90 f5       	brcc	.+100    	; 0x1b5c <MDIO_U8ReadPortValue+0x7a>

	switch(A_PortName)
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	3c 83       	std	Y+4, r19	; 0x04
    1b00:	2b 83       	std	Y+3, r18	; 0x03
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	91 05       	cpc	r25, r1
    1b0a:	d1 f0       	breq	.+52     	; 0x1b40 <MDIO_U8ReadPortValue+0x5e>
    1b0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b10:	22 30       	cpi	r18, 0x02	; 2
    1b12:	31 05       	cpc	r19, r1
    1b14:	2c f4       	brge	.+10     	; 0x1b20 <MDIO_U8ReadPortValue+0x3e>
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	61 f0       	breq	.+24     	; 0x1b36 <MDIO_U8ReadPortValue+0x54>
    1b1e:	1e c0       	rjmp	.+60     	; 0x1b5c <MDIO_U8ReadPortValue+0x7a>
    1b20:	2b 81       	ldd	r18, Y+3	; 0x03
    1b22:	3c 81       	ldd	r19, Y+4	; 0x04
    1b24:	22 30       	cpi	r18, 0x02	; 2
    1b26:	31 05       	cpc	r19, r1
    1b28:	81 f0       	breq	.+32     	; 0x1b4a <MDIO_U8ReadPortValue+0x68>
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	83 30       	cpi	r24, 0x03	; 3
    1b30:	91 05       	cpc	r25, r1
    1b32:	81 f0       	breq	.+32     	; 0x1b54 <MDIO_U8ReadPortValue+0x72>
    1b34:	13 c0       	rjmp	.+38     	; 0x1b5c <MDIO_U8ReadPortValue+0x7a>
	{
		case MDIO_PORTA: L_u8PortValue=PINA; break;
    1b36:	e9 e3       	ldi	r30, 0x39	; 57
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	0e c0       	rjmp	.+28     	; 0x1b5c <MDIO_U8ReadPortValue+0x7a>

		case MDIO_PORTB: L_u8PortValue=PINB; break;
    1b40:	e6 e3       	ldi	r30, 0x36	; 54
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	89 83       	std	Y+1, r24	; 0x01
    1b48:	09 c0       	rjmp	.+18     	; 0x1b5c <MDIO_U8ReadPortValue+0x7a>

		case MDIO_PORTC: L_u8PortValue=PINC; break;
    1b4a:	e3 e3       	ldi	r30, 0x33	; 51
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <MDIO_U8ReadPortValue+0x7a>

		case MDIO_PORTD: L_u8PortValue=PIND; break;
    1b54:	e0 e3       	ldi	r30, 0x30	; 48
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	89 83       	std	Y+1, r24	; 0x01

	}/*end if*/}
	return L_u8PortValue;
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <MDIO_voidSetLowNibbleDirection>:

void MDIO_voidSetLowNibbleDirection(port A_PortName)
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <MDIO_voidSetLowNibbleDirection+0x6>
    1b72:	0f 92       	push	r0
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	89 83       	std	Y+1, r24	; 0x01
	if((A_PortName <= MDIO_PORTD)){
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	84 30       	cpi	r24, 0x04	; 4
    1b7e:	08 f0       	brcs	.+2      	; 0x1b82 <MDIO_voidSetLowNibbleDirection+0x16>
    1b80:	94 c0       	rjmp	.+296    	; 0x1caa <MDIO_voidSetLowNibbleDirection+0x13e>

		switch(A_PortName)
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	3b 83       	std	Y+3, r19	; 0x03
    1b8a:	2a 83       	std	Y+2, r18	; 0x02
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	91 05       	cpc	r25, r1
    1b94:	a1 f1       	breq	.+104    	; 0x1bfe <MDIO_voidSetLowNibbleDirection+0x92>
    1b96:	2a 81       	ldd	r18, Y+2	; 0x02
    1b98:	3b 81       	ldd	r19, Y+3	; 0x03
    1b9a:	22 30       	cpi	r18, 0x02	; 2
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	2c f4       	brge	.+10     	; 0x1baa <MDIO_voidSetLowNibbleDirection+0x3e>
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	71 f0       	breq	.+28     	; 0x1bc4 <MDIO_voidSetLowNibbleDirection+0x58>
    1ba8:	80 c0       	rjmp	.+256    	; 0x1caa <MDIO_voidSetLowNibbleDirection+0x13e>
    1baa:	2a 81       	ldd	r18, Y+2	; 0x02
    1bac:	3b 81       	ldd	r19, Y+3	; 0x03
    1bae:	22 30       	cpi	r18, 0x02	; 2
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <MDIO_voidSetLowNibbleDirection+0x4a>
    1bb4:	41 c0       	rjmp	.+130    	; 0x1c38 <MDIO_voidSetLowNibbleDirection+0xcc>
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bba:	83 30       	cpi	r24, 0x03	; 3
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <MDIO_voidSetLowNibbleDirection+0x56>
    1bc0:	58 c0       	rjmp	.+176    	; 0x1c72 <MDIO_voidSetLowNibbleDirection+0x106>
    1bc2:	73 c0       	rjmp	.+230    	; 0x1caa <MDIO_voidSetLowNibbleDirection+0x13e>
		{
			case MDIO_PORTA:

				MDIO_voidSetPinDirection(PORTA,0,OUTPUT);
    1bc4:	eb e3       	ldi	r30, 0x3B	; 59
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTA,1,OUTPUT);
    1bd2:	eb e3       	ldi	r30, 0x3B	; 59
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTA,2,OUTPUT);
    1be0:	eb e3       	ldi	r30, 0x3B	; 59
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	62 e0       	ldi	r22, 0x02	; 2
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    1bea:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTA,3,OUTPUT);
    1bee:	eb e3       	ldi	r30, 0x3B	; 59
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	63 e0       	ldi	r22, 0x03	; 3
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
    1bfc:	56 c0       	rjmp	.+172    	; 0x1caa <MDIO_voidSetLowNibbleDirection+0x13e>
				break;

			case MDIO_PORTB:

				MDIO_voidSetPinDirection(PORTB,0,OUTPUT);
    1bfe:	e8 e3       	ldi	r30, 0x38	; 56
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTB,1,OUTPUT);
    1c0c:	e8 e3       	ldi	r30, 0x38	; 56
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	61 e0       	ldi	r22, 0x01	; 1
    1c14:	41 e0       	ldi	r20, 0x01	; 1
    1c16:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTB,2,OUTPUT);
    1c1a:	e8 e3       	ldi	r30, 0x38	; 56
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	62 e0       	ldi	r22, 0x02	; 2
    1c22:	41 e0       	ldi	r20, 0x01	; 1
    1c24:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTB,3,OUTPUT);
    1c28:	e8 e3       	ldi	r30, 0x38	; 56
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	63 e0       	ldi	r22, 0x03	; 3
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
    1c36:	39 c0       	rjmp	.+114    	; 0x1caa <MDIO_voidSetLowNibbleDirection+0x13e>
				break;

			case MDIO_PORTC:

				MDIO_voidSetPinDirection(PORTC,0,OUTPUT);
    1c38:	e5 e3       	ldi	r30, 0x35	; 53
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTC,1,OUTPUT);
    1c46:	e5 e3       	ldi	r30, 0x35	; 53
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	41 e0       	ldi	r20, 0x01	; 1
    1c50:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTC,2,OUTPUT);
    1c54:	e5 e3       	ldi	r30, 0x35	; 53
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	62 e0       	ldi	r22, 0x02	; 2
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTC,3,OUTPUT);
    1c62:	e5 e3       	ldi	r30, 0x35	; 53
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	63 e0       	ldi	r22, 0x03	; 3
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
    1c70:	1c c0       	rjmp	.+56     	; 0x1caa <MDIO_voidSetLowNibbleDirection+0x13e>
				break;

			case MDIO_PORTD:

				MDIO_voidSetPinDirection(PORTD,0,OUTPUT);
    1c72:	e2 e3       	ldi	r30, 0x32	; 50
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	41 e0       	ldi	r20, 0x01	; 1
    1c7c:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTD,1,OUTPUT);
    1c80:	e2 e3       	ldi	r30, 0x32	; 50
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	61 e0       	ldi	r22, 0x01	; 1
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTD,2,OUTPUT);
    1c8e:	e2 e3       	ldi	r30, 0x32	; 50
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	62 e0       	ldi	r22, 0x02	; 2
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTD,3,OUTPUT);
    1c9c:	e2 e3       	ldi	r30, 0x32	; 50
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	63 e0       	ldi	r22, 0x03	; 3
    1ca4:	41 e0       	ldi	r20, 0x01	; 1
    1ca6:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				break;

		}/*end if*/}
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <MDIO_voidSetHighNibbleDirection>:

void MDIO_voidSetHighNibbleDirection(port A_PortName)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <MDIO_voidSetHighNibbleDirection+0x6>
    1cbc:	0f 92       	push	r0
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	89 83       	std	Y+1, r24	; 0x01
	if((A_PortName <= MDIO_PORTD)){
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	84 30       	cpi	r24, 0x04	; 4
    1cc8:	08 f0       	brcs	.+2      	; 0x1ccc <MDIO_voidSetHighNibbleDirection+0x16>
    1cca:	94 c0       	rjmp	.+296    	; 0x1df4 <MDIO_voidSetHighNibbleDirection+0x13e>

		switch(A_PortName)
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	3b 83       	std	Y+3, r19	; 0x03
    1cd4:	2a 83       	std	Y+2, r18	; 0x02
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	91 05       	cpc	r25, r1
    1cde:	a1 f1       	breq	.+104    	; 0x1d48 <MDIO_voidSetHighNibbleDirection+0x92>
    1ce0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ce2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ce4:	22 30       	cpi	r18, 0x02	; 2
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <MDIO_voidSetHighNibbleDirection+0x3e>
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	9b 81       	ldd	r25, Y+3	; 0x03
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	71 f0       	breq	.+28     	; 0x1d0e <MDIO_voidSetHighNibbleDirection+0x58>
    1cf2:	80 c0       	rjmp	.+256    	; 0x1df4 <MDIO_voidSetHighNibbleDirection+0x13e>
    1cf4:	2a 81       	ldd	r18, Y+2	; 0x02
    1cf6:	3b 81       	ldd	r19, Y+3	; 0x03
    1cf8:	22 30       	cpi	r18, 0x02	; 2
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <MDIO_voidSetHighNibbleDirection+0x4a>
    1cfe:	41 c0       	rjmp	.+130    	; 0x1d82 <MDIO_voidSetHighNibbleDirection+0xcc>
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	9b 81       	ldd	r25, Y+3	; 0x03
    1d04:	83 30       	cpi	r24, 0x03	; 3
    1d06:	91 05       	cpc	r25, r1
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <MDIO_voidSetHighNibbleDirection+0x56>
    1d0a:	58 c0       	rjmp	.+176    	; 0x1dbc <MDIO_voidSetHighNibbleDirection+0x106>
    1d0c:	73 c0       	rjmp	.+230    	; 0x1df4 <MDIO_voidSetHighNibbleDirection+0x13e>
		{
			case MDIO_PORTA:

				MDIO_voidSetPinDirection(PORTA,4,OUTPUT);
    1d0e:	eb e3       	ldi	r30, 0x3B	; 59
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	64 e0       	ldi	r22, 0x04	; 4
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTA,5,OUTPUT);
    1d1c:	eb e3       	ldi	r30, 0x3B	; 59
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	65 e0       	ldi	r22, 0x05	; 5
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTA,6,OUTPUT);
    1d2a:	eb e3       	ldi	r30, 0x3B	; 59
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	66 e0       	ldi	r22, 0x06	; 6
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTA,7,OUTPUT);
    1d38:	eb e3       	ldi	r30, 0x3B	; 59
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	67 e0       	ldi	r22, 0x07	; 7
    1d40:	41 e0       	ldi	r20, 0x01	; 1
    1d42:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
    1d46:	56 c0       	rjmp	.+172    	; 0x1df4 <MDIO_voidSetHighNibbleDirection+0x13e>
				break;

			case MDIO_PORTB:

				MDIO_voidSetPinDirection(PORTB,4,OUTPUT);
    1d48:	e8 e3       	ldi	r30, 0x38	; 56
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	64 e0       	ldi	r22, 0x04	; 4
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTB,5,OUTPUT);
    1d56:	e8 e3       	ldi	r30, 0x38	; 56
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	65 e0       	ldi	r22, 0x05	; 5
    1d5e:	41 e0       	ldi	r20, 0x01	; 1
    1d60:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTB,6,OUTPUT);
    1d64:	e8 e3       	ldi	r30, 0x38	; 56
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	66 e0       	ldi	r22, 0x06	; 6
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTB,7,OUTPUT);
    1d72:	e8 e3       	ldi	r30, 0x38	; 56
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	67 e0       	ldi	r22, 0x07	; 7
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
    1d80:	39 c0       	rjmp	.+114    	; 0x1df4 <MDIO_voidSetHighNibbleDirection+0x13e>
				break;

			case MDIO_PORTC:

				MDIO_voidSetPinDirection(PORTC,4,OUTPUT);
    1d82:	e5 e3       	ldi	r30, 0x35	; 53
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	64 e0       	ldi	r22, 0x04	; 4
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTC,5,OUTPUT);
    1d90:	e5 e3       	ldi	r30, 0x35	; 53
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	65 e0       	ldi	r22, 0x05	; 5
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTC,6,OUTPUT);
    1d9e:	e5 e3       	ldi	r30, 0x35	; 53
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	66 e0       	ldi	r22, 0x06	; 6
    1da6:	41 e0       	ldi	r20, 0x01	; 1
    1da8:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTC,7,OUTPUT);
    1dac:	e5 e3       	ldi	r30, 0x35	; 53
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	67 e0       	ldi	r22, 0x07	; 7
    1db4:	41 e0       	ldi	r20, 0x01	; 1
    1db6:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
    1dba:	1c c0       	rjmp	.+56     	; 0x1df4 <MDIO_voidSetHighNibbleDirection+0x13e>
				break;

			case MDIO_PORTD:

				MDIO_voidSetPinDirection(PORTD,4,OUTPUT);
    1dbc:	e2 e3       	ldi	r30, 0x32	; 50
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	64 e0       	ldi	r22, 0x04	; 4
    1dc4:	41 e0       	ldi	r20, 0x01	; 1
    1dc6:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTD,5,OUTPUT);
    1dca:	e2 e3       	ldi	r30, 0x32	; 50
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	65 e0       	ldi	r22, 0x05	; 5
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTD,6,OUTPUT);
    1dd8:	e2 e3       	ldi	r30, 0x32	; 50
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	66 e0       	ldi	r22, 0x06	; 6
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				MDIO_voidSetPinDirection(PORTD,7,OUTPUT);
    1de6:	e2 e3       	ldi	r30, 0x32	; 50
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	67 e0       	ldi	r22, 0x07	; 7
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
				break;

		}/*end if*/}
}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <MDIO_voidSetLowNibble>:

void MDIO_voidSetLowNibble(port A_PortName,u8 A_u8Value)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <MDIO_voidSetLowNibble+0x6>
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <MDIO_voidSetLowNibble+0x8>
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	6a 83       	std	Y+2, r22	; 0x02
	A_u8Value &= 0x0F;
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	8f 70       	andi	r24, 0x0F	; 15
    1e14:	8a 83       	std	Y+2, r24	; 0x02

	if((A_PortName <= MDIO_PORTD)){
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	84 30       	cpi	r24, 0x04	; 4
    1e1a:	08 f0       	brcs	.+2      	; 0x1e1e <MDIO_voidSetLowNibble+0x1e>
    1e1c:	5e c0       	rjmp	.+188    	; 0x1eda <MDIO_voidSetLowNibble+0xda>

		switch(A_PortName)
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	3c 83       	std	Y+4, r19	; 0x04
    1e26:	2b 83       	std	Y+3, r18	; 0x03
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	91 05       	cpc	r25, r1
    1e30:	29 f1       	breq	.+74     	; 0x1e7c <MDIO_voidSetLowNibble+0x7c>
    1e32:	2b 81       	ldd	r18, Y+3	; 0x03
    1e34:	3c 81       	ldd	r19, Y+4	; 0x04
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <MDIO_voidSetLowNibble+0x46>
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	61 f0       	breq	.+24     	; 0x1e5c <MDIO_voidSetLowNibble+0x5c>
    1e44:	4a c0       	rjmp	.+148    	; 0x1eda <MDIO_voidSetLowNibble+0xda>
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	31 f1       	breq	.+76     	; 0x1e9c <MDIO_voidSetLowNibble+0x9c>
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	83 30       	cpi	r24, 0x03	; 3
    1e56:	91 05       	cpc	r25, r1
    1e58:	89 f1       	breq	.+98     	; 0x1ebc <MDIO_voidSetLowNibble+0xbc>
    1e5a:	3f c0       	rjmp	.+126    	; 0x1eda <MDIO_voidSetLowNibble+0xda>
		{
			case MDIO_PORTA: PORTA &= 0xF0; PORTA |= A_u8Value; break;
    1e5c:	ab e3       	ldi	r26, 0x3B	; 59
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	eb e3       	ldi	r30, 0x3B	; 59
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	80 7f       	andi	r24, 0xF0	; 240
    1e68:	8c 93       	st	X, r24
    1e6a:	ab e3       	ldi	r26, 0x3B	; 59
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	eb e3       	ldi	r30, 0x3B	; 59
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	90 81       	ld	r25, Z
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	89 2b       	or	r24, r25
    1e78:	8c 93       	st	X, r24
    1e7a:	2f c0       	rjmp	.+94     	; 0x1eda <MDIO_voidSetLowNibble+0xda>

			case MDIO_PORTB: PORTB &= 0xF0; PORTB |= A_u8Value; break;
    1e7c:	a8 e3       	ldi	r26, 0x38	; 56
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e8 e3       	ldi	r30, 0x38	; 56
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	80 7f       	andi	r24, 0xF0	; 240
    1e88:	8c 93       	st	X, r24
    1e8a:	a8 e3       	ldi	r26, 0x38	; 56
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e8 e3       	ldi	r30, 0x38	; 56
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	90 81       	ld	r25, Z
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	89 2b       	or	r24, r25
    1e98:	8c 93       	st	X, r24
    1e9a:	1f c0       	rjmp	.+62     	; 0x1eda <MDIO_voidSetLowNibble+0xda>

			case MDIO_PORTC: PORTC &= 0xF0; PORTC |= A_u8Value; break;
    1e9c:	a5 e3       	ldi	r26, 0x35	; 53
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e5 e3       	ldi	r30, 0x35	; 53
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	80 7f       	andi	r24, 0xF0	; 240
    1ea8:	8c 93       	st	X, r24
    1eaa:	a5 e3       	ldi	r26, 0x35	; 53
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e5 e3       	ldi	r30, 0x35	; 53
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	90 81       	ld	r25, Z
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	89 2b       	or	r24, r25
    1eb8:	8c 93       	st	X, r24
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <MDIO_voidSetLowNibble+0xda>

			case MDIO_PORTD: PORTD &= 0xF0; PORTD |= A_u8Value; break;
    1ebc:	a2 e3       	ldi	r26, 0x32	; 50
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e2 e3       	ldi	r30, 0x32	; 50
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	80 7f       	andi	r24, 0xF0	; 240
    1ec8:	8c 93       	st	X, r24
    1eca:	a2 e3       	ldi	r26, 0x32	; 50
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e2 e3       	ldi	r30, 0x32	; 50
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	90 81       	ld	r25, Z
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	89 2b       	or	r24, r25
    1ed8:	8c 93       	st	X, r24

		}/*end if*/}
}
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <MDIO_voidSetHighNibble>:

void MDIO_voidSetHighNibble(port A_PortName,u8 A_u8Value)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <MDIO_voidSetHighNibble+0x6>
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <MDIO_voidSetHighNibble+0x8>
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	6a 83       	std	Y+2, r22	; 0x02
	A_u8Value <<=4;
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	82 95       	swap	r24
    1efc:	80 7f       	andi	r24, 0xF0	; 240
    1efe:	8a 83       	std	Y+2, r24	; 0x02
	A_u8Value &= 0xF0;
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	80 7f       	andi	r24, 0xF0	; 240
    1f04:	8a 83       	std	Y+2, r24	; 0x02

	if((A_PortName <= MDIO_PORTD)){
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	84 30       	cpi	r24, 0x04	; 4
    1f0a:	08 f0       	brcs	.+2      	; 0x1f0e <MDIO_voidSetHighNibble+0x26>
    1f0c:	5e c0       	rjmp	.+188    	; 0x1fca <MDIO_voidSetHighNibble+0xe2>

		switch(A_PortName)
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3c 83       	std	Y+4, r19	; 0x04
    1f16:	2b 83       	std	Y+3, r18	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	91 05       	cpc	r25, r1
    1f20:	29 f1       	breq	.+74     	; 0x1f6c <MDIO_voidSetHighNibble+0x84>
    1f22:	2b 81       	ldd	r18, Y+3	; 0x03
    1f24:	3c 81       	ldd	r19, Y+4	; 0x04
    1f26:	22 30       	cpi	r18, 0x02	; 2
    1f28:	31 05       	cpc	r19, r1
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <MDIO_voidSetHighNibble+0x4e>
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <MDIO_voidSetHighNibble+0x64>
    1f34:	4a c0       	rjmp	.+148    	; 0x1fca <MDIO_voidSetHighNibble+0xe2>
    1f36:	2b 81       	ldd	r18, Y+3	; 0x03
    1f38:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	31 f1       	breq	.+76     	; 0x1f8c <MDIO_voidSetHighNibble+0xa4>
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	83 30       	cpi	r24, 0x03	; 3
    1f46:	91 05       	cpc	r25, r1
    1f48:	89 f1       	breq	.+98     	; 0x1fac <MDIO_voidSetHighNibble+0xc4>
    1f4a:	3f c0       	rjmp	.+126    	; 0x1fca <MDIO_voidSetHighNibble+0xe2>
		{
			case MDIO_PORTA: PORTA &= 0x0F; PORTA |= A_u8Value; break;
    1f4c:	ab e3       	ldi	r26, 0x3B	; 59
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	eb e3       	ldi	r30, 0x3B	; 59
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	8f 70       	andi	r24, 0x0F	; 15
    1f58:	8c 93       	st	X, r24
    1f5a:	ab e3       	ldi	r26, 0x3B	; 59
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	eb e3       	ldi	r30, 0x3B	; 59
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	90 81       	ld	r25, Z
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	89 2b       	or	r24, r25
    1f68:	8c 93       	st	X, r24
    1f6a:	2f c0       	rjmp	.+94     	; 0x1fca <MDIO_voidSetHighNibble+0xe2>

			case MDIO_PORTB: PORTB &= 0x0F; PORTB |= A_u8Value; break;
    1f6c:	a8 e3       	ldi	r26, 0x38	; 56
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e8 e3       	ldi	r30, 0x38	; 56
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	8f 70       	andi	r24, 0x0F	; 15
    1f78:	8c 93       	st	X, r24
    1f7a:	a8 e3       	ldi	r26, 0x38	; 56
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e8 e3       	ldi	r30, 0x38	; 56
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	90 81       	ld	r25, Z
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	89 2b       	or	r24, r25
    1f88:	8c 93       	st	X, r24
    1f8a:	1f c0       	rjmp	.+62     	; 0x1fca <MDIO_voidSetHighNibble+0xe2>

			case MDIO_PORTC: PORTC &= 0x0F; PORTC |= A_u8Value; break;
    1f8c:	a5 e3       	ldi	r26, 0x35	; 53
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e5 e3       	ldi	r30, 0x35	; 53
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	8f 70       	andi	r24, 0x0F	; 15
    1f98:	8c 93       	st	X, r24
    1f9a:	a5 e3       	ldi	r26, 0x35	; 53
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e5 e3       	ldi	r30, 0x35	; 53
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	90 81       	ld	r25, Z
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	89 2b       	or	r24, r25
    1fa8:	8c 93       	st	X, r24
    1faa:	0f c0       	rjmp	.+30     	; 0x1fca <MDIO_voidSetHighNibble+0xe2>

			case MDIO_PORTD: PORTD &= 0x0F; PORTD |= A_u8Value; break;
    1fac:	a2 e3       	ldi	r26, 0x32	; 50
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e2 e3       	ldi	r30, 0x32	; 50
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	8f 70       	andi	r24, 0x0F	; 15
    1fb8:	8c 93       	st	X, r24
    1fba:	a2 e3       	ldi	r26, 0x32	; 50
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e2 e3       	ldi	r30, 0x32	; 50
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	90 81       	ld	r25, Z
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	89 2b       	or	r24, r25
    1fc8:	8c 93       	st	X, r24

		}/*end if*/}
}
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <MADC_VoidADCInit>:
#include "ADC_Config.h"

void(*ADC_CallBack)(void); /* Pointer to Function */

void MADC_VoidADCInit()
{
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
	// Reference Voltage
#if ADC_Ref_VOLT == AVCC
	SET_BIT(ADMUX , REFS0);
    1fe0:	a7 e2       	ldi	r26, 0x27	; 39
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e7 e2       	ldi	r30, 0x27	; 39
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	80 64       	ori	r24, 0x40	; 64
    1fec:	8c 93       	st	X, r24
	CLR_BIT(ADMUX , REFS1);
    1fee:	a7 e2       	ldi	r26, 0x27	; 39
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e7 e2       	ldi	r30, 0x27	; 39
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	8f 77       	andi	r24, 0x7F	; 127
    1ffa:	8c 93       	st	X, r24
	CLR_BIT(ADMUX , REFS1);
#else
#error "Please Enter The correct Reference"
#endif
	// Adjustment Right
	CLR_BIT(ADMUX , ADLAR);
    1ffc:	a7 e2       	ldi	r26, 0x27	; 39
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e7 e2       	ldi	r30, 0x27	; 39
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	8f 7d       	andi	r24, 0xDF	; 223
    2008:	8c 93       	st	X, r24
	// Select Prescaler
	ADCSRA = ( ADCSRA & 0XF8 ) | ADC_PRS_64 ;
    200a:	a6 e2       	ldi	r26, 0x26	; 38
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e6 e2       	ldi	r30, 0x26	; 38
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	88 7f       	andi	r24, 0xF8	; 248
    2016:	86 60       	ori	r24, 0x06	; 6
    2018:	8c 93       	st	X, r24
	// INTERRUPT Enable & Disable
#if ADC_MODE == POLLING
	CLR_BIT( ADCSRA , ADIE);
    201a:	a6 e2       	ldi	r26, 0x26	; 38
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e6 e2       	ldi	r30, 0x26	; 38
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	87 7f       	andi	r24, 0xF7	; 247
    2026:	8c 93       	st	X, r24
	SET_BIT( ADCSRA , ADIE);
#else
#error "Please Enter The correct Mode"
#endif
	// Auto Triggering Disable " Start Conversion Manually "
	CLR_BIT( ADCSRA , ADATE);
    2028:	a6 e2       	ldi	r26, 0x26	; 38
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e6 e2       	ldi	r30, 0x26	; 38
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8f 7d       	andi	r24, 0xDF	; 223
    2034:	8c 93       	st	X, r24
	// ADC Enable
	SET_BIT( ADCSRA , ADEN);
    2036:	a6 e2       	ldi	r26, 0x26	; 38
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e6 e2       	ldi	r30, 0x26	; 38
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	80 68       	ori	r24, 0x80	; 128
    2042:	8c 93       	st	X, r24
}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <MADC_U16AnalogRead>:

// polling
u16 MADC_U16AnalogRead(u8 A_U8ChannelNO)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	00 d0       	rcall	.+0      	; 0x2050 <MADC_U16AnalogRead+0x6>
    2050:	0f 92       	push	r0
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC;
	// select channel
	ADMUX = (ADMUX & 0XE0) | ( A_U8ChannelNO & 0X07) ; /* 0x07 due to single Ended */
    2058:	a7 e2       	ldi	r26, 0x27	; 39
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e7 e2       	ldi	r30, 0x27	; 39
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	98 2f       	mov	r25, r24
    2064:	90 7e       	andi	r25, 0xE0	; 224
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	87 70       	andi	r24, 0x07	; 7
    206a:	89 2b       	or	r24, r25
    206c:	8c 93       	st	X, r24
	// Start Conversion
	SET_BIT( ADCSRA , ADSC);
    206e:	a6 e2       	ldi	r26, 0x26	; 38
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e6 e2       	ldi	r30, 0x26	; 38
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	80 64       	ori	r24, 0x40	; 64
    207a:	8c 93       	st	X, r24
	// pool on flag
	while ( (GET_BIT( ADCSRA , ADIF)) !=1){}
    207c:	e6 e2       	ldi	r30, 0x26	; 38
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	82 95       	swap	r24
    2084:	8f 70       	andi	r24, 0x0F	; 15
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	81 70       	andi	r24, 0x01	; 1
    208c:	90 70       	andi	r25, 0x00	; 0
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	a9 f3       	breq	.-22     	; 0x207c <MADC_U16AnalogRead+0x32>
	// clear flag
	SET_BIT( ADCSRA , ADIF);
    2092:	a6 e2       	ldi	r26, 0x26	; 38
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e6 e2       	ldi	r30, 0x26	; 38
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	80 61       	ori	r24, 0x10	; 16
    209e:	8c 93       	st	X, r24
	// Read the whole register
	ADC = ADCL ;
    20a0:	e4 e2       	ldi	r30, 0x24	; 36
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9a 83       	std	Y+2, r25	; 0x02
    20ac:	89 83       	std	Y+1, r24	; 0x01
	ADC |= ADCH<<8 ;
    20ae:	e5 e2       	ldi	r30, 0x25	; 37
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	98 2f       	mov	r25, r24
    20ba:	88 27       	eor	r24, r24
    20bc:	9c 01       	movw	r18, r24
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	82 2b       	or	r24, r18
    20c4:	93 2b       	or	r25, r19
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
	return ADC ;
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <MADC_VoidINTStartConversion>:

// INT_ADC

void MADC_VoidINTStartConversion(u8 A_U8ChannelNO)
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	0f 92       	push	r0
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	89 83       	std	Y+1, r24	; 0x01
	// select channel
		ADMUX = (ADMUX & 0XE0) | ( A_U8ChannelNO & 0X07) ; // 0x07 due to single Ended
    20e6:	a7 e2       	ldi	r26, 0x27	; 39
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e7 e2       	ldi	r30, 0x27	; 39
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	98 2f       	mov	r25, r24
    20f2:	90 7e       	andi	r25, 0xE0	; 224
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	87 70       	andi	r24, 0x07	; 7
    20f8:	89 2b       	or	r24, r25
    20fa:	8c 93       	st	X, r24
	// Start Conversion
	SET_BIT( ADCSRA , ADSC);
    20fc:	a6 e2       	ldi	r26, 0x26	; 38
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e6 e2       	ldi	r30, 0x26	; 38
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	80 64       	ori	r24, 0x40	; 64
    2108:	8c 93       	st	X, r24

}
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <MADC_VoidINTsetCallBack>:

void MADC_VoidINTsetCallBack( void(*A_ADC_Ptr)(void))
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	00 d0       	rcall	.+0      	; 0x2118 <MADC_VoidINTsetCallBack+0x6>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
	ADC_CallBack = A_ADC_Ptr ;
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	9a 81       	ldd	r25, Y+2	; 0x02
    2124:	90 93 b5 01 	sts	0x01B5, r25
    2128:	80 93 b4 01 	sts	0x01B4, r24

}
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <MADC_U16INTGetADC>:

u16 MADC_U16INTGetADC()
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <MADC_U16INTGetADC+0x6>
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
	u16 ADC ;
	ADC = ADCL ;
    2140:	e4 e2       	ldi	r30, 0x24	; 36
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	89 83       	std	Y+1, r24	; 0x01
	ADC |= ADCH<<8 ;
    214e:	e5 e2       	ldi	r30, 0x25	; 37
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	88 2f       	mov	r24, r24
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	98 2f       	mov	r25, r24
    215a:	88 27       	eor	r24, r24
    215c:	9c 01       	movw	r18, r24
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	9a 81       	ldd	r25, Y+2	; 0x02
    2162:	82 2b       	or	r24, r18
    2164:	93 2b       	or	r25, r19
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
	return ADC ;
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <__vector_16>:
// ADC_ISR
void __vector_16(void)		__attribute__((signal));
void __vector_16(void)
{
    2178:	1f 92       	push	r1
    217a:	0f 92       	push	r0
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	0f 92       	push	r0
    2180:	11 24       	eor	r1, r1
    2182:	2f 93       	push	r18
    2184:	3f 93       	push	r19
    2186:	4f 93       	push	r20
    2188:	5f 93       	push	r21
    218a:	6f 93       	push	r22
    218c:	7f 93       	push	r23
    218e:	8f 93       	push	r24
    2190:	9f 93       	push	r25
    2192:	af 93       	push	r26
    2194:	bf 93       	push	r27
    2196:	ef 93       	push	r30
    2198:	ff 93       	push	r31
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
	ADC_CallBack();
    21a2:	e0 91 b4 01 	lds	r30, 0x01B4
    21a6:	f0 91 b5 01 	lds	r31, 0x01B5
    21aa:	09 95       	icall
}
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	ff 91       	pop	r31
    21b2:	ef 91       	pop	r30
    21b4:	bf 91       	pop	r27
    21b6:	af 91       	pop	r26
    21b8:	9f 91       	pop	r25
    21ba:	8f 91       	pop	r24
    21bc:	7f 91       	pop	r23
    21be:	6f 91       	pop	r22
    21c0:	5f 91       	pop	r21
    21c2:	4f 91       	pop	r20
    21c4:	3f 91       	pop	r19
    21c6:	2f 91       	pop	r18
    21c8:	0f 90       	pop	r0
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	0f 90       	pop	r0
    21ce:	1f 90       	pop	r1
    21d0:	18 95       	reti

000021d2 <main>:
#include "../MCAL/UART/UART_Private.h"
#include "../MCAL/UART/UART_Config.h"

f32 Sensed_Temp ;
f32 Sensed_Humidity ;
int main(){
    21d2:	0f 93       	push	r16
    21d4:	1f 93       	push	r17
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	c4 55       	subi	r28, 0x54	; 84
    21e0:	d0 40       	sbci	r29, 0x00	; 0
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPinDirection(MDIO_PORTA , PIN6 , INPUT)  ;
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	66 e0       	ldi	r22, 0x06	; 6
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(MDIO_PORTA , PIN1 , INPUT ) ;
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	61 e0       	ldi	r22, 0x01	; 1
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 9d 09 	call	0x133a	; 0x133a <MDIO_voidSetPinDirection>
//	MDIO_voidSetPinDirection(MDIO_PORTD , PIN0 , INPUT ) ;
//	MDIO_voidSetPinDirection(MDIO_PORTD , PIN1 , OUTPUT ) ;

	MUART_voidInit(9600) ;
    2200:	60 e8       	ldi	r22, 0x80	; 128
    2202:	75 e2       	ldi	r23, 0x25	; 37
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 47 07 	call	0xe8e	; 0xe8e <MUART_voidInit>
	MADC_VoidADCInit() ;
    220c:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <MADC_VoidADCInit>
	MTIMER1_voidInitFastPwm() ;
    2210:	0e 94 41 09 	call	0x1282	; 0x1282 <MTIMER1_voidInitFastPwm>
    2214:	fe 01       	movw	r30, r28
    2216:	ef 5a       	subi	r30, 0xAF	; 175
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	a8 ec       	ldi	r26, 0xC8	; 200
    2220:	b2 e4       	ldi	r27, 0x42	; 66
    2222:	80 83       	st	Z, r24
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	a2 83       	std	Z+2, r26	; 0x02
    2228:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222a:	8e 01       	movw	r16, r28
    222c:	03 5b       	subi	r16, 0xB3	; 179
    222e:	1f 4f       	sbci	r17, 0xFF	; 255
    2230:	fe 01       	movw	r30, r28
    2232:	ef 5a       	subi	r30, 0xAF	; 175
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	60 81       	ld	r22, Z
    2238:	71 81       	ldd	r23, Z+1	; 0x01
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	93 81       	ldd	r25, Z+3	; 0x03
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	4a e7       	ldi	r20, 0x7A	; 122
    2244:	55 e4       	ldi	r21, 0x45	; 69
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	f8 01       	movw	r30, r16
    2250:	80 83       	st	Z, r24
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	a2 83       	std	Z+2, r26	; 0x02
    2256:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2258:	fe 01       	movw	r30, r28
    225a:	e3 5b       	subi	r30, 0xB3	; 179
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e8       	ldi	r20, 0x80	; 128
    226c:	5f e3       	ldi	r21, 0x3F	; 63
    226e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2272:	88 23       	and	r24, r24
    2274:	44 f4       	brge	.+16     	; 0x2286 <main+0xb4>
		__ticks = 1;
    2276:	fe 01       	movw	r30, r28
    2278:	e5 5b       	subi	r30, 0xB5	; 181
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	80 83       	st	Z, r24
    2284:	64 c0       	rjmp	.+200    	; 0x234e <main+0x17c>
	else if (__tmp > 65535)
    2286:	fe 01       	movw	r30, r28
    2288:	e3 5b       	subi	r30, 0xB3	; 179
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f e7       	ldi	r20, 0x7F	; 127
    229a:	57 e4       	ldi	r21, 0x47	; 71
    229c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22a0:	18 16       	cp	r1, r24
    22a2:	0c f0       	brlt	.+2      	; 0x22a6 <main+0xd4>
    22a4:	43 c0       	rjmp	.+134    	; 0x232c <main+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a6:	fe 01       	movw	r30, r28
    22a8:	ef 5a       	subi	r30, 0xAF	; 175
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e2       	ldi	r20, 0x20	; 32
    22ba:	51 e4       	ldi	r21, 0x41	; 65
    22bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	8e 01       	movw	r16, r28
    22c6:	05 5b       	subi	r16, 0xB5	; 181
    22c8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	f8 01       	movw	r30, r16
    22d8:	91 83       	std	Z+1, r25	; 0x01
    22da:	80 83       	st	Z, r24
    22dc:	1f c0       	rjmp	.+62     	; 0x231c <main+0x14a>
    22de:	fe 01       	movw	r30, r28
    22e0:	e7 5b       	subi	r30, 0xB7	; 183
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	80 e9       	ldi	r24, 0x90	; 144
    22e6:	91 e0       	ldi	r25, 0x01	; 1
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	80 83       	st	Z, r24
    22ec:	fe 01       	movw	r30, r28
    22ee:	e7 5b       	subi	r30, 0xB7	; 183
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 81       	ld	r24, Z
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <main+0x124>
    22fa:	fe 01       	movw	r30, r28
    22fc:	e7 5b       	subi	r30, 0xB7	; 183
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	91 83       	std	Z+1, r25	; 0x01
    2302:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	de 01       	movw	r26, r28
    2306:	a5 5b       	subi	r26, 0xB5	; 181
    2308:	bf 4f       	sbci	r27, 0xFF	; 255
    230a:	fe 01       	movw	r30, r28
    230c:	e5 5b       	subi	r30, 0xB5	; 181
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	91 81       	ldd	r25, Z+1	; 0x01
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	11 96       	adiw	r26, 0x01	; 1
    2318:	9c 93       	st	X, r25
    231a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231c:	fe 01       	movw	r30, r28
    231e:	e5 5b       	subi	r30, 0xB5	; 181
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	80 81       	ld	r24, Z
    2324:	91 81       	ldd	r25, Z+1	; 0x01
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	d1 f6       	brne	.-76     	; 0x22de <main+0x10c>
    232a:	27 c0       	rjmp	.+78     	; 0x237a <main+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	8e 01       	movw	r16, r28
    232e:	05 5b       	subi	r16, 0xB5	; 181
    2330:	1f 4f       	sbci	r17, 0xFF	; 255
    2332:	fe 01       	movw	r30, r28
    2334:	e3 5b       	subi	r30, 0xB3	; 179
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	60 81       	ld	r22, Z
    233a:	71 81       	ldd	r23, Z+1	; 0x01
    233c:	82 81       	ldd	r24, Z+2	; 0x02
    233e:	93 81       	ldd	r25, Z+3	; 0x03
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	f8 01       	movw	r30, r16
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
    234e:	de 01       	movw	r26, r28
    2350:	a9 5b       	subi	r26, 0xB9	; 185
    2352:	bf 4f       	sbci	r27, 0xFF	; 255
    2354:	fe 01       	movw	r30, r28
    2356:	e5 5b       	subi	r30, 0xB5	; 181
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	80 81       	ld	r24, Z
    235c:	91 81       	ldd	r25, Z+1	; 0x01
    235e:	8d 93       	st	X+, r24
    2360:	9c 93       	st	X, r25
    2362:	fe 01       	movw	r30, r28
    2364:	e9 5b       	subi	r30, 0xB9	; 185
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	80 81       	ld	r24, Z
    236a:	91 81       	ldd	r25, Z+1	; 0x01
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <main+0x19a>
    2370:	fe 01       	movw	r30, r28
    2372:	e9 5b       	subi	r30, 0xB9	; 185
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	80 83       	st	Z, r24

	while(1)
	{
		_delay_ms(100);
		// Temperature as a value from 0 to 1024
		Sensed_Temp = MADC_U16AnalogRead(PIN6);
    237a:	86 e0       	ldi	r24, 0x06	; 6
    237c:	0e 94 25 10 	call	0x204a	; 0x204a <MADC_U16AnalogRead>
    2380:	cc 01       	movw	r24, r24
    2382:	a0 e0       	ldi	r26, 0x00	; 0
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	80 93 ba 01 	sts	0x01BA, r24
    2396:	90 93 bb 01 	sts	0x01BB, r25
    239a:	a0 93 bc 01 	sts	0x01BC, r26
    239e:	b0 93 bd 01 	sts	0x01BD, r27
    23a2:	fe 01       	movw	r30, r28
    23a4:	ed 5b       	subi	r30, 0xBD	; 189
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	a8 ec       	ldi	r26, 0xC8	; 200
    23ae:	b2 e4       	ldi	r27, 0x42	; 66
    23b0:	80 83       	st	Z, r24
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	a2 83       	std	Z+2, r26	; 0x02
    23b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b8:	8e 01       	movw	r16, r28
    23ba:	01 5c       	subi	r16, 0xC1	; 193
    23bc:	1f 4f       	sbci	r17, 0xFF	; 255
    23be:	fe 01       	movw	r30, r28
    23c0:	ed 5b       	subi	r30, 0xBD	; 189
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	60 81       	ld	r22, Z
    23c6:	71 81       	ldd	r23, Z+1	; 0x01
    23c8:	82 81       	ldd	r24, Z+2	; 0x02
    23ca:	93 81       	ldd	r25, Z+3	; 0x03
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	4a e7       	ldi	r20, 0x7A	; 122
    23d2:	55 e4       	ldi	r21, 0x45	; 69
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	f8 01       	movw	r30, r16
    23de:	80 83       	st	Z, r24
    23e0:	91 83       	std	Z+1, r25	; 0x01
    23e2:	a2 83       	std	Z+2, r26	; 0x02
    23e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23e6:	fe 01       	movw	r30, r28
    23e8:	ff 96       	adiw	r30, 0x3f	; 63
    23ea:	60 81       	ld	r22, Z
    23ec:	71 81       	ldd	r23, Z+1	; 0x01
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e8       	ldi	r20, 0x80	; 128
    23f8:	5f e3       	ldi	r21, 0x3F	; 63
    23fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23fe:	88 23       	and	r24, r24
    2400:	2c f4       	brge	.+10     	; 0x240c <main+0x23a>
		__ticks = 1;
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9e af       	std	Y+62, r25	; 0x3e
    2408:	8d af       	std	Y+61, r24	; 0x3d
    240a:	46 c0       	rjmp	.+140    	; 0x2498 <main+0x2c6>
	else if (__tmp > 65535)
    240c:	fe 01       	movw	r30, r28
    240e:	ff 96       	adiw	r30, 0x3f	; 63
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	3f ef       	ldi	r19, 0xFF	; 255
    241c:	4f e7       	ldi	r20, 0x7F	; 127
    241e:	57 e4       	ldi	r21, 0x47	; 71
    2420:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2424:	18 16       	cp	r1, r24
    2426:	64 f5       	brge	.+88     	; 0x2480 <main+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2428:	fe 01       	movw	r30, r28
    242a:	ed 5b       	subi	r30, 0xBD	; 189
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	60 81       	ld	r22, Z
    2430:	71 81       	ldd	r23, Z+1	; 0x01
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	93 81       	ldd	r25, Z+3	; 0x03
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e2       	ldi	r20, 0x20	; 32
    243c:	51 e4       	ldi	r21, 0x41	; 65
    243e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	bc 01       	movw	r22, r24
    2448:	cd 01       	movw	r24, r26
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	9e af       	std	Y+62, r25	; 0x3e
    2454:	8d af       	std	Y+61, r24	; 0x3d
    2456:	0f c0       	rjmp	.+30     	; 0x2476 <main+0x2a4>
    2458:	80 e9       	ldi	r24, 0x90	; 144
    245a:	91 e0       	ldi	r25, 0x01	; 1
    245c:	9c af       	std	Y+60, r25	; 0x3c
    245e:	8b af       	std	Y+59, r24	; 0x3b
    2460:	8b ad       	ldd	r24, Y+59	; 0x3b
    2462:	9c ad       	ldd	r25, Y+60	; 0x3c
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <main+0x292>
    2468:	9c af       	std	Y+60, r25	; 0x3c
    246a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246c:	8d ad       	ldd	r24, Y+61	; 0x3d
    246e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	9e af       	std	Y+62, r25	; 0x3e
    2474:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2476:	8d ad       	ldd	r24, Y+61	; 0x3d
    2478:	9e ad       	ldd	r25, Y+62	; 0x3e
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	69 f7       	brne	.-38     	; 0x2458 <main+0x286>
    247e:	16 c0       	rjmp	.+44     	; 0x24ac <main+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2480:	fe 01       	movw	r30, r28
    2482:	ff 96       	adiw	r30, 0x3f	; 63
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9e af       	std	Y+62, r25	; 0x3e
    2496:	8d af       	std	Y+61, r24	; 0x3d
    2498:	8d ad       	ldd	r24, Y+61	; 0x3d
    249a:	9e ad       	ldd	r25, Y+62	; 0x3e
    249c:	9a af       	std	Y+58, r25	; 0x3a
    249e:	89 af       	std	Y+57, r24	; 0x39
    24a0:	89 ad       	ldd	r24, Y+57	; 0x39
    24a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <main+0x2d2>
    24a8:	9a af       	std	Y+58, r25	; 0x3a
    24aa:	89 af       	std	Y+57, r24	; 0x39

		// Humidity as a value from 0 to 1024
		_delay_ms(100);
		Sensed_Humidity = MADC_U16AnalogRead(PIN1) ;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	0e 94 25 10 	call	0x204a	; 0x204a <MADC_U16AnalogRead>
    24b2:	cc 01       	movw	r24, r24
    24b4:	a0 e0       	ldi	r26, 0x00	; 0
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	80 93 b6 01 	sts	0x01B6, r24
    24c8:	90 93 b7 01 	sts	0x01B7, r25
    24cc:	a0 93 b8 01 	sts	0x01B8, r26
    24d0:	b0 93 b9 01 	sts	0x01B9, r27

		if ((Sensed_Temp * 0.5) <= 25)
    24d4:	80 91 ba 01 	lds	r24, 0x01BA
    24d8:	90 91 bb 01 	lds	r25, 0x01BB
    24dc:	a0 91 bc 01 	lds	r26, 0x01BC
    24e0:	b0 91 bd 01 	lds	r27, 0x01BD
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	48 ec       	ldi	r20, 0xC8	; 200
    2502:	51 e4       	ldi	r21, 0x41	; 65
    2504:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    2508:	18 16       	cp	r1, r24
    250a:	0c f4       	brge	.+2      	; 0x250e <main+0x33c>
    250c:	7f c0       	rjmp	.+254    	; 0x260c <main+0x43a>
		{
			// Close the fan
			MTIMER1_voidSetPinACompareMatch(0) ;
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	0e 94 8b 09 	call	0x1316	; 0x1316 <MTIMER1_voidSetPinACompareMatch>
			// Display fan speed in %
			MUART_voidSendString("Fan is Closed") ;
    2516:	80 e6       	ldi	r24, 0x60	; 96
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MUART_voidSendString>
			MUART_voidSendString("\r\n") ;
    251e:	8e e6       	ldi	r24, 0x6E	; 110
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MUART_voidSendString>
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	a8 ec       	ldi	r26, 0xC8	; 200
    252c:	b1 e4       	ldi	r27, 0x41	; 65
    252e:	8d ab       	std	Y+53, r24	; 0x35
    2530:	9e ab       	std	Y+54, r25	; 0x36
    2532:	af ab       	std	Y+55, r26	; 0x37
    2534:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2536:	6d a9       	ldd	r22, Y+53	; 0x35
    2538:	7e a9       	ldd	r23, Y+54	; 0x36
    253a:	8f a9       	ldd	r24, Y+55	; 0x37
    253c:	98 ad       	ldd	r25, Y+56	; 0x38
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	4a e7       	ldi	r20, 0x7A	; 122
    2544:	55 e4       	ldi	r21, 0x45	; 69
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	89 ab       	std	Y+49, r24	; 0x31
    2550:	9a ab       	std	Y+50, r25	; 0x32
    2552:	ab ab       	std	Y+51, r26	; 0x33
    2554:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2556:	69 a9       	ldd	r22, Y+49	; 0x31
    2558:	7a a9       	ldd	r23, Y+50	; 0x32
    255a:	8b a9       	ldd	r24, Y+51	; 0x33
    255c:	9c a9       	ldd	r25, Y+52	; 0x34
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e8       	ldi	r20, 0x80	; 128
    2564:	5f e3       	ldi	r21, 0x3F	; 63
    2566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    256a:	88 23       	and	r24, r24
    256c:	2c f4       	brge	.+10     	; 0x2578 <main+0x3a6>
		__ticks = 1;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	98 ab       	std	Y+48, r25	; 0x30
    2574:	8f a7       	std	Y+47, r24	; 0x2f
    2576:	3f c0       	rjmp	.+126    	; 0x25f6 <main+0x424>
	else if (__tmp > 65535)
    2578:	69 a9       	ldd	r22, Y+49	; 0x31
    257a:	7a a9       	ldd	r23, Y+50	; 0x32
    257c:	8b a9       	ldd	r24, Y+51	; 0x33
    257e:	9c a9       	ldd	r25, Y+52	; 0x34
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	3f ef       	ldi	r19, 0xFF	; 255
    2584:	4f e7       	ldi	r20, 0x7F	; 127
    2586:	57 e4       	ldi	r21, 0x47	; 71
    2588:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258c:	18 16       	cp	r1, r24
    258e:	4c f5       	brge	.+82     	; 0x25e2 <main+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2590:	6d a9       	ldd	r22, Y+53	; 0x35
    2592:	7e a9       	ldd	r23, Y+54	; 0x36
    2594:	8f a9       	ldd	r24, Y+55	; 0x37
    2596:	98 ad       	ldd	r25, Y+56	; 0x38
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e2       	ldi	r20, 0x20	; 32
    259e:	51 e4       	ldi	r21, 0x41	; 65
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	98 ab       	std	Y+48, r25	; 0x30
    25b6:	8f a7       	std	Y+47, r24	; 0x2f
    25b8:	0f c0       	rjmp	.+30     	; 0x25d8 <main+0x406>
    25ba:	80 e9       	ldi	r24, 0x90	; 144
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	9e a7       	std	Y+46, r25	; 0x2e
    25c0:	8d a7       	std	Y+45, r24	; 0x2d
    25c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    25c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <main+0x3f4>
    25ca:	9e a7       	std	Y+46, r25	; 0x2e
    25cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    25d0:	98 a9       	ldd	r25, Y+48	; 0x30
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	98 ab       	std	Y+48, r25	; 0x30
    25d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25da:	98 a9       	ldd	r25, Y+48	; 0x30
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	69 f7       	brne	.-38     	; 0x25ba <main+0x3e8>
    25e0:	e7 c0       	rjmp	.+462    	; 0x27b0 <main+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e2:	69 a9       	ldd	r22, Y+49	; 0x31
    25e4:	7a a9       	ldd	r23, Y+50	; 0x32
    25e6:	8b a9       	ldd	r24, Y+51	; 0x33
    25e8:	9c a9       	ldd	r25, Y+52	; 0x34
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	98 ab       	std	Y+48, r25	; 0x30
    25f4:	8f a7       	std	Y+47, r24	; 0x2f
    25f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25f8:	98 a9       	ldd	r25, Y+48	; 0x30
    25fa:	9c a7       	std	Y+44, r25	; 0x2c
    25fc:	8b a7       	std	Y+43, r24	; 0x2b
    25fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2600:	9c a5       	ldd	r25, Y+44	; 0x2c
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <main+0x430>
    2606:	9c a7       	std	Y+44, r25	; 0x2c
    2608:	8b a7       	std	Y+43, r24	; 0x2b
    260a:	d2 c0       	rjmp	.+420    	; 0x27b0 <main+0x5de>
			_delay_ms(25) ;
		}
		else
		{
			// Duty value of the generated PWM
			MTIMER1_voidSetPinACompareMatch((Sensed_Temp*65536)/1024.0) ;
    260c:	80 91 ba 01 	lds	r24, 0x01BA
    2610:	90 91 bb 01 	lds	r25, 0x01BB
    2614:	a0 91 bc 01 	lds	r26, 0x01BC
    2618:	b0 91 bd 01 	lds	r27, 0x01BD
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e8       	ldi	r20, 0x80	; 128
    2626:	57 e4       	ldi	r21, 0x47	; 71
    2628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	bc 01       	movw	r22, r24
    2632:	cd 01       	movw	r24, r26
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e8       	ldi	r20, 0x80	; 128
    263a:	54 e4       	ldi	r21, 0x44	; 68
    263c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	0e 94 8b 09 	call	0x1316	; 0x1316 <MTIMER1_voidSetPinACompareMatch>
			// Display fan speed in %
			MUART_voidSendString("Fan Speed Percentage = ") ;
    2654:	81 e7       	ldi	r24, 0x71	; 113
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MUART_voidSendString>
			MUART_voidSendNumber((Sensed_Temp*0.5*100)/150) ;
    265c:	80 91 ba 01 	lds	r24, 0x01BA
    2660:	90 91 bb 01 	lds	r25, 0x01BB
    2664:	a0 91 bc 01 	lds	r26, 0x01BC
    2668:	b0 91 bd 01 	lds	r27, 0x01BD
    266c:	bc 01       	movw	r22, r24
    266e:	cd 01       	movw	r24, r26
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e0       	ldi	r20, 0x00	; 0
    2676:	5f e3       	ldi	r21, 0x3F	; 63
    2678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	48 ec       	ldi	r20, 0xC8	; 200
    268a:	52 e4       	ldi	r21, 0x42	; 66
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	46 e1       	ldi	r20, 0x16	; 22
    269e:	53 e4       	ldi	r21, 0x43	; 67
    26a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	bc 01       	movw	r22, r24
    26aa:	cd 01       	movw	r24, r26
    26ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	bc 01       	movw	r22, r24
    26b6:	cd 01       	movw	r24, r26
    26b8:	0e 94 5f 08 	call	0x10be	; 0x10be <MUART_voidSendNumber>
			MUART_voidSendString(" %") ;
    26bc:	89 e8       	ldi	r24, 0x89	; 137
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MUART_voidSendString>
			MUART_voidSendString("\r\n") ;
    26c4:	8e e6       	ldi	r24, 0x6E	; 110
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MUART_voidSendString>
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	a8 ec       	ldi	r26, 0xC8	; 200
    26d2:	b1 e4       	ldi	r27, 0x41	; 65
    26d4:	8f a3       	std	Y+39, r24	; 0x27
    26d6:	98 a7       	std	Y+40, r25	; 0x28
    26d8:	a9 a7       	std	Y+41, r26	; 0x29
    26da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26dc:	6f a1       	ldd	r22, Y+39	; 0x27
    26de:	78 a5       	ldd	r23, Y+40	; 0x28
    26e0:	89 a5       	ldd	r24, Y+41	; 0x29
    26e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	4a e7       	ldi	r20, 0x7A	; 122
    26ea:	55 e4       	ldi	r21, 0x45	; 69
    26ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	8b a3       	std	Y+35, r24	; 0x23
    26f6:	9c a3       	std	Y+36, r25	; 0x24
    26f8:	ad a3       	std	Y+37, r26	; 0x25
    26fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26fc:	6b a1       	ldd	r22, Y+35	; 0x23
    26fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2700:	8d a1       	ldd	r24, Y+37	; 0x25
    2702:	9e a1       	ldd	r25, Y+38	; 0x26
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e8       	ldi	r20, 0x80	; 128
    270a:	5f e3       	ldi	r21, 0x3F	; 63
    270c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2710:	88 23       	and	r24, r24
    2712:	2c f4       	brge	.+10     	; 0x271e <main+0x54c>
		__ticks = 1;
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	9a a3       	std	Y+34, r25	; 0x22
    271a:	89 a3       	std	Y+33, r24	; 0x21
    271c:	3f c0       	rjmp	.+126    	; 0x279c <main+0x5ca>
	else if (__tmp > 65535)
    271e:	6b a1       	ldd	r22, Y+35	; 0x23
    2720:	7c a1       	ldd	r23, Y+36	; 0x24
    2722:	8d a1       	ldd	r24, Y+37	; 0x25
    2724:	9e a1       	ldd	r25, Y+38	; 0x26
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	3f ef       	ldi	r19, 0xFF	; 255
    272a:	4f e7       	ldi	r20, 0x7F	; 127
    272c:	57 e4       	ldi	r21, 0x47	; 71
    272e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2732:	18 16       	cp	r1, r24
    2734:	4c f5       	brge	.+82     	; 0x2788 <main+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2736:	6f a1       	ldd	r22, Y+39	; 0x27
    2738:	78 a5       	ldd	r23, Y+40	; 0x28
    273a:	89 a5       	ldd	r24, Y+41	; 0x29
    273c:	9a a5       	ldd	r25, Y+42	; 0x2a
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e2       	ldi	r20, 0x20	; 32
    2744:	51 e4       	ldi	r21, 0x41	; 65
    2746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	bc 01       	movw	r22, r24
    2750:	cd 01       	movw	r24, r26
    2752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	9a a3       	std	Y+34, r25	; 0x22
    275c:	89 a3       	std	Y+33, r24	; 0x21
    275e:	0f c0       	rjmp	.+30     	; 0x277e <main+0x5ac>
    2760:	80 e9       	ldi	r24, 0x90	; 144
    2762:	91 e0       	ldi	r25, 0x01	; 1
    2764:	98 a3       	std	Y+32, r25	; 0x20
    2766:	8f 8f       	std	Y+31, r24	; 0x1f
    2768:	8f 8d       	ldd	r24, Y+31	; 0x1f
    276a:	98 a1       	ldd	r25, Y+32	; 0x20
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <main+0x59a>
    2770:	98 a3       	std	Y+32, r25	; 0x20
    2772:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2774:	89 a1       	ldd	r24, Y+33	; 0x21
    2776:	9a a1       	ldd	r25, Y+34	; 0x22
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	9a a3       	std	Y+34, r25	; 0x22
    277c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277e:	89 a1       	ldd	r24, Y+33	; 0x21
    2780:	9a a1       	ldd	r25, Y+34	; 0x22
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	69 f7       	brne	.-38     	; 0x2760 <main+0x58e>
    2786:	14 c0       	rjmp	.+40     	; 0x27b0 <main+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2788:	6b a1       	ldd	r22, Y+35	; 0x23
    278a:	7c a1       	ldd	r23, Y+36	; 0x24
    278c:	8d a1       	ldd	r24, Y+37	; 0x25
    278e:	9e a1       	ldd	r25, Y+38	; 0x26
    2790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	9a a3       	std	Y+34, r25	; 0x22
    279a:	89 a3       	std	Y+33, r24	; 0x21
    279c:	89 a1       	ldd	r24, Y+33	; 0x21
    279e:	9a a1       	ldd	r25, Y+34	; 0x22
    27a0:	9e 8f       	std	Y+30, r25	; 0x1e
    27a2:	8d 8f       	std	Y+29, r24	; 0x1d
    27a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <main+0x5d6>
    27ac:	9e 8f       	std	Y+30, r25	; 0x1e
    27ae:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(25) ;
		}

		// Temperature in °C
		Sensed_Temp = Sensed_Temp * 0.5;
    27b0:	80 91 ba 01 	lds	r24, 0x01BA
    27b4:	90 91 bb 01 	lds	r25, 0x01BB
    27b8:	a0 91 bc 01 	lds	r26, 0x01BC
    27bc:	b0 91 bd 01 	lds	r27, 0x01BD
    27c0:	bc 01       	movw	r22, r24
    27c2:	cd 01       	movw	r24, r26
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e0       	ldi	r20, 0x00	; 0
    27ca:	5f e3       	ldi	r21, 0x3F	; 63
    27cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	80 93 ba 01 	sts	0x01BA, r24
    27d8:	90 93 bb 01 	sts	0x01BB, r25
    27dc:	a0 93 bc 01 	sts	0x01BC, r26
    27e0:	b0 93 bd 01 	sts	0x01BD, r27
		// Humidity in %
		Sensed_Humidity = (((Sensed_Humidity/1024)*4000 - 800)/(3200-800))*100 ;
    27e4:	80 91 b6 01 	lds	r24, 0x01B6
    27e8:	90 91 b7 01 	lds	r25, 0x01B7
    27ec:	a0 91 b8 01 	lds	r26, 0x01B8
    27f0:	b0 91 b9 01 	lds	r27, 0x01B9
    27f4:	bc 01       	movw	r22, r24
    27f6:	cd 01       	movw	r24, r26
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e8       	ldi	r20, 0x80	; 128
    27fe:	54 e4       	ldi	r21, 0x44	; 68
    2800:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	bc 01       	movw	r22, r24
    280a:	cd 01       	movw	r24, r26
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	4a e7       	ldi	r20, 0x7A	; 122
    2812:	55 e4       	ldi	r21, 0x45	; 69
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	48 e4       	ldi	r20, 0x48	; 72
    2826:	54 e4       	ldi	r21, 0x44	; 68
    2828:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	bc 01       	movw	r22, r24
    2832:	cd 01       	movw	r24, r26
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	46 e1       	ldi	r20, 0x16	; 22
    283a:	55 e4       	ldi	r21, 0x45	; 69
    283c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	48 ec       	ldi	r20, 0xC8	; 200
    284e:	52 e4       	ldi	r21, 0x42	; 66
    2850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	80 93 b6 01 	sts	0x01B6, r24
    285c:	90 93 b7 01 	sts	0x01B7, r25
    2860:	a0 93 b8 01 	sts	0x01B8, r26
    2864:	b0 93 b9 01 	sts	0x01B9, r27

		// display temperature in °C
		MUART_voidSendString("Temperature = ") ;
    2868:	8c e8       	ldi	r24, 0x8C	; 140
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MUART_voidSendString>
		MUART_voidSendNumber(Sensed_Temp) ;
    2870:	80 91 ba 01 	lds	r24, 0x01BA
    2874:	90 91 bb 01 	lds	r25, 0x01BB
    2878:	a0 91 bc 01 	lds	r26, 0x01BC
    287c:	b0 91 bd 01 	lds	r27, 0x01BD
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	0e 94 5f 08 	call	0x10be	; 0x10be <MUART_voidSendNumber>
		MUART_voidSendString(" °C") ;
    2894:	8b e9       	ldi	r24, 0x9B	; 155
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MUART_voidSendString>
		MUART_voidSendString("\r\n") ;
    289c:	8e e6       	ldi	r24, 0x6E	; 110
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MUART_voidSendString>
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	a8 ec       	ldi	r26, 0xC8	; 200
    28aa:	b1 e4       	ldi	r27, 0x41	; 65
    28ac:	89 8f       	std	Y+25, r24	; 0x19
    28ae:	9a 8f       	std	Y+26, r25	; 0x1a
    28b0:	ab 8f       	std	Y+27, r26	; 0x1b
    28b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b4:	69 8d       	ldd	r22, Y+25	; 0x19
    28b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	4a e7       	ldi	r20, 0x7A	; 122
    28c2:	55 e4       	ldi	r21, 0x45	; 69
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	8d 8b       	std	Y+21, r24	; 0x15
    28ce:	9e 8b       	std	Y+22, r25	; 0x16
    28d0:	af 8b       	std	Y+23, r26	; 0x17
    28d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28d4:	6d 89       	ldd	r22, Y+21	; 0x15
    28d6:	7e 89       	ldd	r23, Y+22	; 0x16
    28d8:	8f 89       	ldd	r24, Y+23	; 0x17
    28da:	98 8d       	ldd	r25, Y+24	; 0x18
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e8       	ldi	r20, 0x80	; 128
    28e2:	5f e3       	ldi	r21, 0x3F	; 63
    28e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e8:	88 23       	and	r24, r24
    28ea:	2c f4       	brge	.+10     	; 0x28f6 <main+0x724>
		__ticks = 1;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9c 8b       	std	Y+20, r25	; 0x14
    28f2:	8b 8b       	std	Y+19, r24	; 0x13
    28f4:	3f c0       	rjmp	.+126    	; 0x2974 <main+0x7a2>
	else if (__tmp > 65535)
    28f6:	6d 89       	ldd	r22, Y+21	; 0x15
    28f8:	7e 89       	ldd	r23, Y+22	; 0x16
    28fa:	8f 89       	ldd	r24, Y+23	; 0x17
    28fc:	98 8d       	ldd	r25, Y+24	; 0x18
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	3f ef       	ldi	r19, 0xFF	; 255
    2902:	4f e7       	ldi	r20, 0x7F	; 127
    2904:	57 e4       	ldi	r21, 0x47	; 71
    2906:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    290a:	18 16       	cp	r1, r24
    290c:	4c f5       	brge	.+82     	; 0x2960 <main+0x78e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290e:	69 8d       	ldd	r22, Y+25	; 0x19
    2910:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2912:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2914:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e2       	ldi	r20, 0x20	; 32
    291c:	51 e4       	ldi	r21, 0x41	; 65
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	bc 01       	movw	r22, r24
    2928:	cd 01       	movw	r24, r26
    292a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	9c 8b       	std	Y+20, r25	; 0x14
    2934:	8b 8b       	std	Y+19, r24	; 0x13
    2936:	0f c0       	rjmp	.+30     	; 0x2956 <main+0x784>
    2938:	80 e9       	ldi	r24, 0x90	; 144
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	9a 8b       	std	Y+18, r25	; 0x12
    293e:	89 8b       	std	Y+17, r24	; 0x11
    2940:	89 89       	ldd	r24, Y+17	; 0x11
    2942:	9a 89       	ldd	r25, Y+18	; 0x12
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <main+0x772>
    2948:	9a 8b       	std	Y+18, r25	; 0x12
    294a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294c:	8b 89       	ldd	r24, Y+19	; 0x13
    294e:	9c 89       	ldd	r25, Y+20	; 0x14
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	9c 8b       	std	Y+20, r25	; 0x14
    2954:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2956:	8b 89       	ldd	r24, Y+19	; 0x13
    2958:	9c 89       	ldd	r25, Y+20	; 0x14
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	69 f7       	brne	.-38     	; 0x2938 <main+0x766>
    295e:	14 c0       	rjmp	.+40     	; 0x2988 <main+0x7b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2960:	6d 89       	ldd	r22, Y+21	; 0x15
    2962:	7e 89       	ldd	r23, Y+22	; 0x16
    2964:	8f 89       	ldd	r24, Y+23	; 0x17
    2966:	98 8d       	ldd	r25, Y+24	; 0x18
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	9c 8b       	std	Y+20, r25	; 0x14
    2972:	8b 8b       	std	Y+19, r24	; 0x13
    2974:	8b 89       	ldd	r24, Y+19	; 0x13
    2976:	9c 89       	ldd	r25, Y+20	; 0x14
    2978:	98 8b       	std	Y+16, r25	; 0x10
    297a:	8f 87       	std	Y+15, r24	; 0x0f
    297c:	8f 85       	ldd	r24, Y+15	; 0x0f
    297e:	98 89       	ldd	r25, Y+16	; 0x10
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <main+0x7ae>
    2984:	98 8b       	std	Y+16, r25	; 0x10
    2986:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(25) ;

		// display humidity in %
		MUART_voidSendString("Humidity = ") ;
    2988:	80 ea       	ldi	r24, 0xA0	; 160
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MUART_voidSendString>
		MUART_voidSendNumber(Sensed_Humidity) ;
    2990:	80 91 b6 01 	lds	r24, 0x01B6
    2994:	90 91 b7 01 	lds	r25, 0x01B7
    2998:	a0 91 b8 01 	lds	r26, 0x01B8
    299c:	b0 91 b9 01 	lds	r27, 0x01B9
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	bc 01       	movw	r22, r24
    29ae:	cd 01       	movw	r24, r26
    29b0:	0e 94 5f 08 	call	0x10be	; 0x10be <MUART_voidSendNumber>
		MUART_voidSendString(" %") ;
    29b4:	89 e8       	ldi	r24, 0x89	; 137
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MUART_voidSendString>
		MUART_voidSendString("\r\n") ;
    29bc:	8e e6       	ldi	r24, 0x6E	; 110
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MUART_voidSendString>
		MUART_voidSendString("\r\n") ;
    29c4:	8e e6       	ldi	r24, 0x6E	; 110
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MUART_voidSendString>
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	a8 ec       	ldi	r26, 0xC8	; 200
    29d2:	b1 e4       	ldi	r27, 0x41	; 65
    29d4:	8b 87       	std	Y+11, r24	; 0x0b
    29d6:	9c 87       	std	Y+12, r25	; 0x0c
    29d8:	ad 87       	std	Y+13, r26	; 0x0d
    29da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29de:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	4a e7       	ldi	r20, 0x7A	; 122
    29ea:	55 e4       	ldi	r21, 0x45	; 69
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	8f 83       	std	Y+7, r24	; 0x07
    29f6:	98 87       	std	Y+8, r25	; 0x08
    29f8:	a9 87       	std	Y+9, r26	; 0x09
    29fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29fc:	6f 81       	ldd	r22, Y+7	; 0x07
    29fe:	78 85       	ldd	r23, Y+8	; 0x08
    2a00:	89 85       	ldd	r24, Y+9	; 0x09
    2a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e8       	ldi	r20, 0x80	; 128
    2a0a:	5f e3       	ldi	r21, 0x3F	; 63
    2a0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a10:	88 23       	and	r24, r24
    2a12:	2c f4       	brge	.+10     	; 0x2a1e <main+0x84c>
		__ticks = 1;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	9e 83       	std	Y+6, r25	; 0x06
    2a1a:	8d 83       	std	Y+5, r24	; 0x05
    2a1c:	3f c0       	rjmp	.+126    	; 0x2a9c <main+0x8ca>
	else if (__tmp > 65535)
    2a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a20:	78 85       	ldd	r23, Y+8	; 0x08
    2a22:	89 85       	ldd	r24, Y+9	; 0x09
    2a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	3f ef       	ldi	r19, 0xFF	; 255
    2a2a:	4f e7       	ldi	r20, 0x7F	; 127
    2a2c:	57 e4       	ldi	r21, 0x47	; 71
    2a2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a32:	18 16       	cp	r1, r24
    2a34:	4c f5       	brge	.+82     	; 0x2a88 <main+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e2       	ldi	r20, 0x20	; 32
    2a44:	51 e4       	ldi	r21, 0x41	; 65
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	9e 83       	std	Y+6, r25	; 0x06
    2a5c:	8d 83       	std	Y+5, r24	; 0x05
    2a5e:	0f c0       	rjmp	.+30     	; 0x2a7e <main+0x8ac>
    2a60:	80 e9       	ldi	r24, 0x90	; 144
    2a62:	91 e0       	ldi	r25, 0x01	; 1
    2a64:	9c 83       	std	Y+4, r25	; 0x04
    2a66:	8b 83       	std	Y+3, r24	; 0x03
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <main+0x89a>
    2a70:	9c 83       	std	Y+4, r25	; 0x04
    2a72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	9e 83       	std	Y+6, r25	; 0x06
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a80:	9e 81       	ldd	r25, Y+6	; 0x06
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	69 f7       	brne	.-38     	; 0x2a60 <main+0x88e>
    2a86:	c6 cb       	rjmp	.-2164   	; 0x2214 <main+0x42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9e 83       	std	Y+6, r25	; 0x06
    2a9a:	8d 83       	std	Y+5, r24	; 0x05
    2a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <main+0x8d6>
    2aac:	9a 83       	std	Y+2, r25	; 0x02
    2aae:	89 83       	std	Y+1, r24	; 0x01
    2ab0:	b1 cb       	rjmp	.-2206   	; 0x2214 <main+0x42>

00002ab2 <__udivmodsi4>:
    2ab2:	a1 e2       	ldi	r26, 0x21	; 33
    2ab4:	1a 2e       	mov	r1, r26
    2ab6:	aa 1b       	sub	r26, r26
    2ab8:	bb 1b       	sub	r27, r27
    2aba:	fd 01       	movw	r30, r26
    2abc:	0d c0       	rjmp	.+26     	; 0x2ad8 <__udivmodsi4_ep>

00002abe <__udivmodsi4_loop>:
    2abe:	aa 1f       	adc	r26, r26
    2ac0:	bb 1f       	adc	r27, r27
    2ac2:	ee 1f       	adc	r30, r30
    2ac4:	ff 1f       	adc	r31, r31
    2ac6:	a2 17       	cp	r26, r18
    2ac8:	b3 07       	cpc	r27, r19
    2aca:	e4 07       	cpc	r30, r20
    2acc:	f5 07       	cpc	r31, r21
    2ace:	20 f0       	brcs	.+8      	; 0x2ad8 <__udivmodsi4_ep>
    2ad0:	a2 1b       	sub	r26, r18
    2ad2:	b3 0b       	sbc	r27, r19
    2ad4:	e4 0b       	sbc	r30, r20
    2ad6:	f5 0b       	sbc	r31, r21

00002ad8 <__udivmodsi4_ep>:
    2ad8:	66 1f       	adc	r22, r22
    2ada:	77 1f       	adc	r23, r23
    2adc:	88 1f       	adc	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	1a 94       	dec	r1
    2ae2:	69 f7       	brne	.-38     	; 0x2abe <__udivmodsi4_loop>
    2ae4:	60 95       	com	r22
    2ae6:	70 95       	com	r23
    2ae8:	80 95       	com	r24
    2aea:	90 95       	com	r25
    2aec:	9b 01       	movw	r18, r22
    2aee:	ac 01       	movw	r20, r24
    2af0:	bd 01       	movw	r22, r26
    2af2:	cf 01       	movw	r24, r30
    2af4:	08 95       	ret

00002af6 <__prologue_saves__>:
    2af6:	2f 92       	push	r2
    2af8:	3f 92       	push	r3
    2afa:	4f 92       	push	r4
    2afc:	5f 92       	push	r5
    2afe:	6f 92       	push	r6
    2b00:	7f 92       	push	r7
    2b02:	8f 92       	push	r8
    2b04:	9f 92       	push	r9
    2b06:	af 92       	push	r10
    2b08:	bf 92       	push	r11
    2b0a:	cf 92       	push	r12
    2b0c:	df 92       	push	r13
    2b0e:	ef 92       	push	r14
    2b10:	ff 92       	push	r15
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	ca 1b       	sub	r28, r26
    2b20:	db 0b       	sbc	r29, r27
    2b22:	0f b6       	in	r0, 0x3f	; 63
    2b24:	f8 94       	cli
    2b26:	de bf       	out	0x3e, r29	; 62
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	09 94       	ijmp

00002b2e <__epilogue_restores__>:
    2b2e:	2a 88       	ldd	r2, Y+18	; 0x12
    2b30:	39 88       	ldd	r3, Y+17	; 0x11
    2b32:	48 88       	ldd	r4, Y+16	; 0x10
    2b34:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b36:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b38:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b40:	b9 84       	ldd	r11, Y+9	; 0x09
    2b42:	c8 84       	ldd	r12, Y+8	; 0x08
    2b44:	df 80       	ldd	r13, Y+7	; 0x07
    2b46:	ee 80       	ldd	r14, Y+6	; 0x06
    2b48:	fd 80       	ldd	r15, Y+5	; 0x05
    2b4a:	0c 81       	ldd	r16, Y+4	; 0x04
    2b4c:	1b 81       	ldd	r17, Y+3	; 0x03
    2b4e:	aa 81       	ldd	r26, Y+2	; 0x02
    2b50:	b9 81       	ldd	r27, Y+1	; 0x01
    2b52:	ce 0f       	add	r28, r30
    2b54:	d1 1d       	adc	r29, r1
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	ed 01       	movw	r28, r26
    2b62:	08 95       	ret

00002b64 <_exit>:
    2b64:	f8 94       	cli

00002b66 <__stop_program>:
    2b66:	ff cf       	rjmp	.-2      	; 0x2b66 <__stop_program>
